#### Declaration tables #####
sentences (
  doc_id text,
  section_id text,
  sent_id int,
  ref_doc_id text,
  words text[],
  lemmas text[],
  poses text[],
  ners text[],
  dep_paths text[],
  dep_parents int[]
 ).


sentences_input (
  doc_id text,
  section_id text,
  sent_id int,
  words text,
  lemmas text,
  poses text,
  ners text,
  dep_paths text,
  dep_parents text
 ).

hpo_to_doc_via_mesh (
  hpo_id text,
  doc_id text
).

genes (
  #include primary key when dd fixes find command
  #gene_id text primary key,
  ensembl_id text,
  canonical_name text,
  gene_name text,
  name_type text
).

gene_mentions (
  id bigint,
  doc_id text,
        section_id text,
  sent_id int,
  wordidxs int[],
  mention_id text,
        mapping_type text,
  supertype text,
        subtype text,
        gene_name text,
  words text[],
  is_correct boolean
).

variant_mentions (
  id bigint,
  doc_id text,
        section_id text,
  sent_id int,
  wordidxs int[],
  mention_id text,
  supertype text,
        subtype text,
  entity text,
  words text[],
  is_correct boolean
).

gene_features (
  doc_id text,
        section_id text,
  mention_id text,
  feature text
).

pheno_mentions (
  id bigint,
  doc_id text,
        section_id text,
  sent_id int,
  wordidxs int[],
  mention_id text,
  supertype text,
        subtype text,
  entity text,
  words text[],
  is_correct boolean
).

pheno_features (
  doc_id text,
        section_id text,
  mention_id text,
  feature text
).

variant_features (
  doc_id text,
        section_id text,
  mention_id text,
  feature text
).


genepheno_relations (
  id bigint,
  relation_id text,
  doc_id text,
        section_id text,
  sent_id int,
        gene_mention_id text,
        gene_name text,
        gene_wordidxs int[],
        gene_is_correct boolean,
  pheno_mention_id text,
        pheno_entity text,
        pheno_wordidxs int[],
        pheno_is_correct boolean
).

genepheno_association (
  id bigint,
  relation_id text,
  doc_id text,
        section_id text,
  sent_id int,
        gene_mention_id text,
        gene_name text,
        gene_wordidxs int[],
  pheno_mention_id text,
        pheno_entity text,
        pheno_wordidxs int[],
  is_correct boolean,
        supertype text,
        subtype text
).

genepheno_causation (
  id bigint,
  relation_id text,
  doc_id text,
        section_id text,
  sent_id int,
        gene_mention_id text,
        gene_name text,
        gene_wordidxs int[],
  pheno_mention_id text,
        pheno_entity text,
        pheno_wordidxs int[],
  is_correct boolean,
        supertype text,
        subtype text
).

genepheno_features (
  doc_id text,
        section_id text,
  relation_id text,
  feature text
).

genevariant_relations (
  id bigint,
  relation_id text,
  doc_id text,
        section1_id text,
  sent1_id int,
        section2_id text,
  sent2_id int,
  variant_mention_id text,
        variant_entity text,
        variant_wordidxs int[],
        variant_is_correct boolean,
        gene_mention_id text,
        gene_name text,
        gene_wordidxs int[],
        gene_is_correct boolean,
  is_correct boolean,
        supertype text,
        subtype text
).

genevariant_features (
  doc_id text,
        section_id text,
  relation_id text,
  feature text
).

test_nlp (
  id bigint
).

plos_doi_to_pmid (
  doi text,
  pmid text
).

non_gene_acronyms (
  # id for random variable
  id bigint,
  doc_id text,
        section_id text,
  sent_id int,
  short_wordidxs int[],
  long_wordidxs int[],
  mention_id text,
  supertype text,
        subtype text,
  abbrev text,
  definition text[],
  is_correct boolean
).

non_gene_acronyms_features (
  doc_id text,
        section_id text,
  mention_id text,
  feature text
).

pheno_acronyms (
  # id for random variable
  id bigint,
  doc_id text,
        section_id text,
  sent_id int,
  short_wordidxs int[],
  long_wordidxs int[],
  mention_id text,
  supertype text,
        subtype text,
  abbrev text,
  definition text[],
        entity text,
  is_correct boolean
).

pheno_acronyms_features (
  doc_id text,
        section_id text,
  mention_id text,
  feature text
).

genepheno_holdout_set (
        doc_id text,
        section_id text,
        sent_id int,
        gene_wordidxs int[],
        pheno_wordidxs int[]
).

genepheno_holdout_labels (
  doc_id text,
  section_id text,
  sent_id int,
  is_correct text,
  type text,
  labeler text
).

genepheno_causation_canon (
  hpo_id text,
  ensembl_id text
).

genepheno_association_canon (
  hpo_id text,
  ensembl_id text
).

hpo_abnormalities (
  hpo_id text,
  pheno_name text
).

charite_canon (
  hpo_id text,
  ensembl_id text
).

charite (
  hpo_id text,
  ensembl_id text,
  source text
).

hgvs_hpo (
  variant text,
  hpo_id text
).

dummy (
  a int,
  b int,
  c int
).

genepheno_pairs_sentences(
  doc_id text,
  section_id text,
  sent_id int,
  gene_mention_ids text,
  gene_entities text[],
  gene_wordidxs text,
  gene_is_corrects boolean[],
  pheno_mention_ids text,
  pheno_entities text[],
  pheno_wordidxs text,
  pheno_is_corrects boolean[]).

##### Declare Variable Relations #####

gene_mentions_filtered?(relation_id text).
pheno_mentions_filtered?(relation_id text).
genepheno_association?(relation_id text).
genepheno_causation?(relation_id text).
non_gene_acronyms?(relation_id text).
genevariant_relations?(relation_id text).




##### Candidate Mapping and Supervision Rules #####

#Extractor: serialize_sentences
sentences_input(
 doc_id,
  section_id,
  sent_id,
  ARRAY_TO_STRING(words, "|^|"),
  ARRAY_TO_STRING(lemmas, "|^|"),
  ARRAY_TO_STRING(poses, "|^|"),
  ARRAY_TO_STRING(ners, "|^|"),
  ARRAY_TO_STRING(dep_paths, "|^|"),
  ARRAY_TO_STRING(dep_parents, "|^|")) :-  sentences(doc_id, section_id, _, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents).


#How to clean some tables ?
#Issues for sql_extractors cleanup_doc_ids1/2


#How to load from tsv files ? 8 extractors
#Load_genes:
function load_genes over rows like genes
  returns rows like genes
  implementation "${APP_HOME}/code/load_ensembl_table.sh" handles tsv lines.


#genes += load_genes(a, b, c).



# gene_extract_candidates:
function gene_extract_candidates over (doc_id text,
  section_id text,
  sent_id int,
  words text,
  dep_paths text,
  dep_parents text,
  lemmas text,
  poses text,
  ners text)
  returns rows like gene_mentions
  implementation "code/gene_extract_candidates.py" handles tsv lines.

gene_mentions += gene_extract_candidates(doc_id, section_id, sent_id, words, dep_paths, dep_parents, lemmas, poses, ners) :-
  sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents).

#Define sql extractor non_gene_acronyms_delete_candidates ?

#Gene extract features
function gene_extract_features over rows like gene_extract_features_input
  returns rows like gene_features
  implementation "code/gene_extract_features.py" handles tsv lines.

gene_features += gene_extract_features(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents, mention_id, supertype, ARRAY_TO_STRING(gene_wordidxs, "|^|")) :-
  sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents),
  gene_mentions(_, doc_id, section_id, sent_id, gene_wordidxs, mention_id, supertype, _, _, _, _).

#variant_extract_candidates
function variant_extract_candidates over rows like variant_extract_candidates_input
  returns rows like variant_mentions
  implementation "code/variant_extract_candidates.py" handles tsv lines.

variant_mentions += variant_extract_candidates(doc_id, section_id, sent_id, words) :- sentences_input(doc_id, section_id, sent_id, words, _, _, _, _, _).


#Pheno extract candidates
    # NOTE: input_batch_size extended because Robin thought that the init cost was highest
    # TODO -> re-evaluate this / test..?  
function pheno_extract_candidates over rows like pheno_extract_candidates_input
  returns rows like pheno_mentions
  implementation "code/pheno_extract_candidates.py" handles tsv lines.

pheno_mentions += pheno_extract_candidates(doc_id, section_id, sent_id, words, lemmas, poses, ners) :-
sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, _, _).


#variant_extract_features
function variant_extract_features over rows like variant_extract_features_input
  returns rows like variant_features
  implementation "code/variant_extract_features.py" handles tsv lines.

variant_features += variant_extract_features(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents, mention_id, array_to_string(wordidxs, "|^|")) :- sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents), 
variant_mentions_filtered(_, _, _, _, wordidxs, mention_id, _, _, _, _, _).






