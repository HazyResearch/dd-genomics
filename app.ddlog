##### Creation views for mindbender #####

# Currently, the mindbender has some troubles tracing sentence with multiple keys, so tables are created, e.g., *_view with view_key for view

@source
sentences_input_views(
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  @searchable
  words text,
  lemmas text,
  poses text,
  ners text,
  dep_paths text,
  dep_parents text,
  @key
  views_key text).

sentences_input_views(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents, doc_id || "@" || section_id || "@" || sent_id) :-
  sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents).

@extraction
gene_mentions_views(
  id bigint,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  wordidxs text,
  @key
  mention_id text,
  @navigable
  mapping_type text,
  @navigable
  supertype text,
  @navigable
  subtype text,
  @navigable
  gene_name text,
  @searchable
  words text,
  @navigable
  is_correct boolean,
  @searchable
  features text[],
  @searchable
  weights text[],
  @searchable
  is_correct_labels text,
  @navigable
  labeler text,
  @references(relation="sentences_input_views", column="views_key", alias="sent_gene")
  views_key text).

#Quite dirty hack to add the "order by" commands in the array of features and weights, which cannot be done directly in app.ddlog
#Currently, the following ddlog extraction is not done but a similar one is copied in deepdive.conf, in which the "ORDER BY" commands were added manually...

#gene_mentions_views(id, doc_id, section_id, sent_id, gene_wordidxs, mention_id, mapping_type, supertype, subtype, gene_name, words, is_correct, ARRAY_AGG(feature), ARRAY_AGG(weights), is_correct_labels, labeler, doc_id || "@" || section_id || "@" || sent_id) :-
#gene_mentions_filtered(id, doc_id, section_id, sent_id, gene_wordidxs, mention_id, mapping_type, supertype, subtype, gene_name, words, is_correct),
#gene_features(doc_id, section_id, mention_id, feature),
#dd_inference_result_variables_mapped_weights_bis(_, _, _, "inf_istrue_gene_mentions_filtered_inference--" ||feature, _, weights),
#[abs(weights) >0],
#OPTIONAL[ gene_labels(mention_id, is_correct_labels, labeler)].


#Small hack for which we add this table (with an empty tsv file in input) and then, after a run, we run the command 
#deepdive sql 'drop table if exists dd_inference_result_variables_mapped_weights_bis; drop view if exists dd_inference_result_variables_mapped_weights_bis; create view dd_inference_result_variables_mapped_weights_bis as (select * from dd_inference_result_variables_mapped_weights);'
#This is done to get the weights of the features because currently ddlog cannot refer to tables created after a run.

dd_inference_result_variables_mapped_weights_bis(
 id          integer          ,
 isfixed     boolean          ,
 initvalue   integer          ,
 description text             ,
 categories  text             ,
 weight      real
).

@extraction
pheno_mentions_views(
  id bigint,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  wordidxs int[],
  @key
  mention_id text,
  @navigable
  supertype text,
  @navigable
  subtype text,
  @navigable
  entity text,
  @searchable
  words text[],
  @navigable
  is_correct boolean,
  @references(relation="sentences_input_views", column="views_key", alias="sent_pheno")
  views_key text).

pheno_mentions_views(id, doc_id, section_id, sent_id, pheno_wordidxs, mention_id, supertype, subtype, entity, pheno_words, is_correct, doc_id || "@" || section_id || "@" || sent_id) :-
  pheno_mentions(id, doc_id, section_id, sent_id, pheno_wordidxs, mention_id, supertype, subtype, entity, pheno_words, is_correct).

#Small workaround to easily update the is_charite_canon in the gp_views

charite_canon_temp_views(hpo_id, gene_name, "t") :-
charite_canon (hpo_id, ensembl_id), 
genes(ensembl_id,  _,  gene_name,  _).

@extraction
genepheno_association_views(
  id bigint,
  @key
  relation_id text,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  gene_mention_id text,
  @navigable
  gene_name text,
  gene_wordidxs int[],
  pheno_mention_id text,
  @navigable
  pheno_entity text,
  pheno_wordidxs int[],
  @navigable
  is_correct boolean,
  supertype text,
  subtype text,
  @searchable
  features text[],
  @searchable
  weights text[],
  @searchable
  is_correct_labels text,
  @navigable
  labeler text,
  @navigable
  is_charite_canon text,
  @references(relation="sentences_input_views", column="views_key", alias="genepheno_association_extraction")
  views_key text).


#Here we seem to define it as a table but it is actually only a view (the cmd_extractor is modified in deepdive.conf). We just add here the declaration for genepheno_association_views_temp otherwise the compiler doesn't recongnize a view which output is defined in deepdive.conf
#That was the actual plan but there is an error in the name used by views in the extraction to genepheno_association_views. So now we really use tables

genepheno_association_views_temp(
  id bigint,
  relation_id text,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  gene_mention_id text,
  gene_name text,
  gene_wordidxs int[],
  pheno_mention_id text,
  pheno_entity text,
  pheno_wordidxs int[],
  is_correct boolean,
  supertype text,
  subtype text,
  features text[],
  weights text[],
  is_correct_labels text,
  labeler text,
  views_key text).

#genepheno_association_views_temp(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype, ARRAY_AGG(feature), ARRAY_AGG(weights), is_correct_labels, labeler, doc_id || "@" || section_id || "@" || sent_id) :-
#genepheno_features ( doc_id, section_id, relation_id, feature),
#dd_inference_result_variables_mapped_weights_bis(_, _, _, "inf_istrue_genepheno_association_inference--" ||feature, _, weights),
#[abs(weights) >0],
#genepheno_association(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype),
#OPTIONAL[ genepheno_association_labels(relation_id, is_correct_labels, labeler)].


genepheno_association_views(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype, features, weights, is_correct_labels, labeler, is_charite_canon, views_key) *:-
genepheno_association_views_temp(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype, features, weights, is_correct_labels, labeler, views_key), 
OPTIONAL[charite_canon_temp_views(pheno_entity, gene_entity, is_charite_canon)].



@extraction
genepheno_causation_views(
  id bigint,
  @key
  relation_id text,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  gene_mention_id text,
  @navigable
  gene_name text,
  gene_wordidxs int[],
  pheno_mention_id text,
  @navigable
  pheno_entity text,
  pheno_wordidxs int[],
  @navigable
  is_correct boolean,
  supertype text,
  subtype text,
  @searchable
  features text[],
  @searchable
  weights text[],
  @searchable
  is_correct_labels text,
  @navigable
  labeler text,
  @navigable
  is_charite_canon text,
  @references(relation="sentences_input_views", column="views_key", alias="genepheno_causation_extraction")
  views_key text).

genepheno_causation_views_temp(
  id bigint,
  relation_id text,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  gene_mention_id text,
  gene_name text,
  gene_wordidxs int[],
  pheno_mention_id text,
  pheno_entity text,
  pheno_wordidxs int[],
  is_correct boolean,
  supertype text,
  subtype text,
  features text[],
  weights text[],
  is_correct_labels text,
  labeler text,
  views_key text).

#genepheno_causation_views_temp(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype, ARRAY_AGG(feature), ARRAY_AGG(weights), is_correct_labels, labeler, doc_id || "@" || section_id || "@" || sent_id) :-
#genepheno_causation(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype),
#genepheno_features ( doc_id, section_id, relation_id, feature),
#dd_inference_result_variables_mapped_weights_bis(_, _, _, "inf_istrue_genepheno_causation_inference--" ||feature, _, weights),
#[abs(weights) >0],
#OPTIONAL[ genepheno_causation_labels(relation_id, is_correct_labels, labeler)].

genepheno_causation_views(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype, features, weights, is_correct_labels, labeler, is_charite_canon, views_key) *:-
genepheno_causation_views_temp(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype, features, weights, is_correct_labels, labeler, views_key), 
OPTIONAL[charite_canon_temp_views(pheno_entity, gene_entity, is_charite_canon)].




#### Declaration tables #####
#sentences (
#  @distributed_by
#  doc_id text,
#  section_id text,
#  sent_id int,
#  ref_doc_id text,
#  words text[],
#  lemmas text[],
#  poses text[],
#  ners text[],
#  dep_paths text[],
#  dep_parents int[]
# ).

#@source
sentences_input (
  #@key
  @distributed_by
  doc_id text,
  #@key
  section_id text,
  #@key
  sent_id int,
  #@searchable
  words text,
  lemmas text,
  poses text,
  ners text,
  dep_paths text,
  dep_parents text
 ).

generifs (
  ensembl_id text,
  @distributed_by
  doc_id text,
  words text
).

#hpo_to_doc_via_mesh (
#  hpo_id text,
#  doc_id text
#).

genes (
  #include primary key when dd fixes find command
  #gene_id text primary key,
  @distributed_by
  ensembl_id text,
  canonical_name text,
  gene_name text,
  name_type text
).

gene_mentions_temp_before_non_gene_acronyms_delete_candidates (
  id bigint,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  wordidxs int[],
  mention_id text,
  mapping_type text,
  supertype text,
  subtype text,
  gene_name text,
  words text[],
  is_correct boolean
).

#@extraction
gene_mentions (
  id bigint,
  #@references(relation="sentences_input", column="doc_id")
  @distributed_by
  doc_id text,
  ##@references(relation="sentences_input", column="section_id")
  section_id text,
  ##@references(relation="sentences_input", column="sent_id")
  sent_id int,
  wordidxs int[],
  #@key
  mention_id text,
  mapping_type text,
  supertype text,
  subtype text,
  #@searchable
  gene_name text,
  words text[],
  #@navigable
  is_correct boolean
).

variant_mentions (
  id bigint,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  wordidxs int[],
  mention_id text,
  supertype text,
  subtype text,
  entity text,
  variant_type text,
  ivsNum text,
  pos text,
  posPlus text,
  fromPos text,
  toPos text,
  seq text,
  fromSeq text,
  toSeq text,
  words text[],
  is_correct boolean
).

gene_features (
  @distributed_by
  doc_id text,
        section_id text,
  mention_id text,
  feature text
).

#@extraction
pheno_mentions (
  id bigint,
  #@references(relation="sentences_input", column="doc_id")
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  wordidxs int[],
  #@key
  mention_id text,
  supertype text,
  subtype text,
  #@searchable
  entity text,
  words text[],
  #@navigable
  is_correct boolean
).

#Two temporary tables created to avoid that two processus are outputing to the same table (here mostly because processses truncates the table just before putting stuff into it)
#We then union the two temporary tables

pheno_mentions_before_union_1 (
  id bigint,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  wordidxs int[],
  mention_id text,
  supertype text,
  subtype text,
  entity text,
  words text[],
  is_correct boolean
).

pheno_mentions_before_union_2 (
  id bigint,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  wordidxs int[],
  mention_id text,
  supertype text,
  subtype text,
  entity text,
  words text[],
  is_correct boolean
).

#Temporary table created to avoid a "dependency loop" and help the compiler understand better the order pheno_extract_candidates ->p heno_acronyms_extract_candidates -> pheno_acronyms_aggregate_candidates pheno_acronyms_insert_candidates

pheno_mentions_without_acronyms (
  id bigint,
  @distributed_by
  doc_id text,
        section_id text,
  sent_id int,
  wordidxs int[],
  mention_id text,
  supertype text,
        subtype text,
  entity text,
  words text[],
  is_correct boolean
).

pheno_features (
  @distributed_by
  doc_id text,
        section_id text,
  mention_id text,
  feature text
).

#variant_features (
#  @distributed_by
#  doc_id text,
#        section_id text,
#  mention_id text,
#  feature text
#).

genepheno_causation_all_superv (
  id bigint,
  relation_id text,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  gene_mention_id text,
  gene_name text,
  gene_wordidxs int[],
  pheno_mention_id text,
  pheno_entity text,
  pheno_wordidxs int[],
  is_correct boolean,
  supertype text,
  subtype text
).

genepheno_causation_all_superv_non_holdout (
  id bigint,
  relation_id text,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  gene_mention_id text,
  gene_name text,
  gene_wordidxs int[],
  pheno_mention_id text,
  pheno_entity text,
  pheno_wordidxs int[],
  is_correct boolean,
  supertype text,
  subtype text
).

genepheno_causation_all_superv_holdout (
  id bigint,
  relation_id text,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  gene_mention_id text,
  gene_name text,
  gene_wordidxs int[],
  pheno_mention_id text,
  pheno_entity text,
  pheno_wordidxs int[],
  is_correct boolean,
  supertype text,
  subtype text
).

genepheno_causation (
  id bigint,
  relation_id text,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  gene_mention_id text,
  gene_name text,
  gene_wordidxs int[],
  pheno_mention_id text,
  pheno_entity text,
  pheno_wordidxs int[],
  is_correct boolean,
  supertype text,
  subtype text
).

genepheno_association_all_superv (
  id bigint,
  relation_id text,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  gene_mention_id text,
  gene_name text,
  gene_wordidxs int[],
  pheno_mention_id text,
  pheno_entity text,
  pheno_wordidxs int[],
  is_correct boolean,
  supertype text,
  subtype text
).

genepheno_association_all_superv_non_holdout (
  id bigint,
  relation_id text,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  gene_mention_id text,
  gene_name text,
  gene_wordidxs int[],
  pheno_mention_id text,
  pheno_entity text,
  pheno_wordidxs int[],
  is_correct boolean,
  supertype text,
  subtype text
).

genepheno_association_all_superv_holdout (
  id bigint,
  relation_id text,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  gene_mention_id text,
  gene_name text,
  gene_wordidxs int[],
  pheno_mention_id text,
  pheno_entity text,
  pheno_wordidxs int[],
  is_correct boolean,
  supertype text,
  subtype text
).

genepheno_association (
  id bigint,
  relation_id text,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  gene_mention_id text,
  gene_name text,
  gene_wordidxs int[],
  pheno_mention_id text,
  pheno_entity text,
  pheno_wordidxs int[],
  is_correct boolean,
  supertype text,
  subtype text
).

genepheno_features (
  @distributed_by
  doc_id text,
        section_id text,
  relation_id text,
  feature text
).

#? Do we keep this table ?
genevariant_relations (
  id bigint,
  relation_id text,
  doc_id text,
  section1_id text,
  sent1_id int,
  section2_id text,
  sent2_id int,
  variant_mention_id text,
  variant_entity text,
  variant_wordidxs int[],
  variant_is_correct boolean,
  gene_mention_id text,
  gene_name text,
  gene_wordidxs int[],
  gene_is_correct boolean,
  is_correct boolean,
  supertype text,
  subtype text
).

#genevariant_features (
#  @distributed_by
#  doc_id text,
#        section_id text,
#  relation_id text,
#  feature text
#).

#test_nlp (
#  @distributed_by
#  id bigint
#).

#plos_doi_to_pmid (
#  @distributed_by
#  doi text,
#  pmid text
#).

non_gene_acronyms (
  # id for random variable
  id bigint,
  @distributed_by
  doc_id text,
        section_id text,
  sent_id int,
  short_wordidxs int[],
  long_wordidxs int[],
  mention_id text,
  supertype text,
        subtype text,
  abbrev text,
  definition text[],
  is_correct boolean
).

non_gene_acronyms_features (
  @distributed_by
  doc_id text,
  section_id text,
  mention_id text,
  feature text
).

pheno_acronyms (
  # id for random variable
  id bigint,
  @distributed_by
  doc_id text,
        section_id text,
  sent_id int,
  short_wordidxs int[],
  long_wordidxs int[],
  mention_id text,
  supertype text,
        subtype text,
  abbrev text,
  definition text[],
        entity text,
  is_correct boolean
).

pheno_acronyms_features (
  @distributed_by
  doc_id text,
        section_id text,
  mention_id text,
  feature text
).

hpo_abnormalities (
  @distributed_by
  hpo_id text,
  pheno_name text
).

charite_canon (
  hpo_id text,
  ensembl_id text
).

charite (
  hpo_id text,
  ensembl_id text,
  source text
).

hgvs_hpo (
  variant text,
  hpo_id text
).

genepheno_pairs_sentences(
  @distributed_by
 doc_id            text,     
 section_id        text,      
 sent_id           integer,  
 gene_mention_ids  text,      
 gene_names        text[], 
 gene_wordidxs     text,      
 gene_is_corrects  boolean[],
 pheno_mention_ids text,      
 pheno_entities    text[],
 pheno_wordidxs    text,      
 pheno_is_corrects boolean[]
).

ensembl_protein_sequences (
  @distributed_by
  ensembl_transcript text,
  aa_seq text[]
).

ensembl_gene_sequences (
  @distributed_by
  ensembl_transcript text,
  n_seq text[]
).

ensgene (
  bin int,
  name text,
  chrom text,
  strand text,
  txStart int,
  txEnd int,
  cdsStart int,
  cdsEnd int,
  exonCount int,
  exonStarts text,
  exonEnds text,
  score int,
  name2 text,
  cdsStartStat text,
  cdsEndStat text,
 exonFrames text
).

genepheno_relations(
 id               bigint, 
 relation_id      text,   
 @distributed_by
 doc_id           text,      
 section_id       text,      
 sent_id          integer,
 gene_mention_id  text,      
 gene_name        text,      
 gene_wordidxs    integer[], 
 gene_is_correct  boolean, 
 pheno_mention_id text,      
 pheno_entity     text,      
 pheno_wordidxs   integer[], 
 pheno_is_correct boolean).

doc_metadata(
 @distributed_by
 doc_id             text,    
 source_name        text,    
 source_year        integer,
 source_text_year   text,    
 source_year_status text,    
 issn_global        text,    
 issn_print         text,    
 issn_electronic    text,
 mesh_terms         text).

allowed_phenos (
  @distributed_by
  hpo_id text,
  names text,
  synonyms text).

gene_holdout_set (
        @distributed_by
        doc_id text,
        section_id text,
        sent_id int,
        gene_wordidxs int[]
).

gene_holdout_labels (
  doc_id text,
  section_id text,
  sent_id int,
  is_correct text,
  labeler text
).

omim_allelic_variant_pmids (
@distributed_by
pmid text).


#Tables for automatic labels synchronization 

genepheno_causation_labels
(relation_id text,
is_correct text,
labeler text).

genepheno_association_labels
(relation_id text, 
is_correct text, 
labeler text).

gene_labels
(mention_id text, 
is_correct text, 
labeler text).

pheno_labels
(relation_id text, 
is_correct text, 
labeler text).

##### Extractors #####

#Extractor: serialize_sentences
#Here commented out since we start directly from sentences_input
#sentences_input(
#  doc_id,
#  section_id,
#  sent_id,
#  ARRAY_TO_STRING(words, "|^|"),
#  ARRAY_TO_STRING(lemmas, "|^|"),
#  ARRAY_TO_STRING(poses, "|^|"),
#  ARRAY_TO_STRING(ners, "|^|"),
#  ARRAY_TO_STRING(dep_paths, "|^|"),
#  ARRAY_TO_STRING(dep_parents, "|^|")) :-  sentences(doc_id, section_id, sent_id,_, words, lemmas, poses, ners, dep_paths, dep_parents).


# gene_extract_candidates:
function gene_extract_candidates over (doc_id text,
  section_id text,
  sent_id int,
  words text,
  dep_paths text,
  dep_parents text,
  lemmas text,
  poses text,
  ners text)
  returns rows like gene_mentions
  implementation "code/gene_extract_candidates.py" handles tsv lines.

#gene_extract_candidates_view_temp (doc_id) *:-
#pheno_mentions(id, doc_id, section_id, sent_id, wordidxs, mention_id, supertype, subtype, entity, words, is_correct).

gene_mentions_temp_before_non_gene_acronyms_delete_candidates += gene_extract_candidates(doc_id, section_id, sent_id, words, dep_paths, dep_parents, lemmas, poses, ners) :-
  sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents).

#non_gene_acronyms_delete_candidates
gene_mentions_non_gene_acronyms(
  id bigint,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  wordidxs int[],
  mention_id text,
  mapping_type text,
  supertype text,
  subtype text,
  gene_name text,
  words text[],
  is_correct boolean
).

gene_mentions_non_gene_acronyms(id, doc_id, section_id, sent_id, wordidxs, mention_id, mapping_type, supertype, subtype, gene_name, words, is_correct) :-
gene_mentions_temp_before_non_gene_acronyms_delete_candidates(id, doc_id, section_id, sent_id, wordidxs, mention_id, mapping_type, supertype, subtype, gene_name, words, is_correct), 
non_gene_acronyms( _, doc_id, _, _, _, _, _, _, _, gene_name, _, is_correct_nga), 
[is_correct_nga = "t" ; is_correct_nga IS NULL].

gene_mentions_updated_condition_met_before_union (id, doc_id, section_id, sent_id, wordidxs, mention_id, mapping_type, "ABBREVIATION", subtype, gene_name, words, "f") :-
gene_mentions_temp_before_non_gene_acronyms_delete_candidates(id, doc_id, section_id, sent_id, wordidxs, mention_id, mapping_type, supertype, subtype, gene_name, words, is_correct), 
EXISTS[non_gene_acronyms( _, doc_id, _, _, _, _, _, _, _, gene_name, _, is_correct_nga), [is_correct_nga = "t" ; is_correct_nga IS NULL]].

gene_mentions_updated_condition_not_met_before_union (id, doc_id, section_id, sent_id, wordidxs, mention_id, mapping_type, supertype, subtype, gene_name, words, is_correct) :-
gene_mentions_temp_before_non_gene_acronyms_delete_candidates(id, doc_id, section_id, sent_id, wordidxs, mention_id, mapping_type, supertype, subtype, gene_name, words, is_correct), 
! EXISTS[non_gene_acronyms(_, doc_id, _, _, _, _, _, _, _, gene_name, _, is_correct_nga), [is_correct_nga = "t" ; is_correct_nga IS NULL]].

gene_mentions(id, doc_id, section_id, sent_id, wordidxs, mention_id, mapping_type, supertype, subtype, gene_name, words, is_correct) :-
gene_mentions_updated_condition_not_met_before_union (id, doc_id, section_id, sent_id, wordidxs, mention_id, mapping_type, supertype, subtype, gene_name, words, is_correct);
gene_mentions_updated_condition_met_before_union (id, doc_id, section_id, sent_id, wordidxs, mention_id, mapping_type, supertype, subtype, gene_name, words, is_correct).

#gene_mentions(id, doc_id, section_id, sent_id, wordidxs, mention_id, mapping_type, supertype, subtype, gene_name, words, is_correct) :-
#gene_mentions_temp_before_non_gene_acronyms_delete_candidates(id, doc_id, section_id, sent_id, wordidxs, mention_id, mapping_type, supertype, subtype, gene_name, words, is_correct), 
#! EXISTS[non_gene_acronyms(_, doc_id, _, _, _, _, _, _, _, gene_name, _, is_correct_nga), [is_correct_nga = "t" ; is_correct_nga IS NULL]].

#Gene extract features
function gene_extract_features over rows like gene_extract_features_input
  returns rows like gene_features
  implementation "code/gene_extract_features.py" handles tsv lines.

gene_features += gene_extract_features(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents, mention_id, supertype, gene_wordidxs) :-
  sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents),
  gene_mentions_filtered(_, doc_id, section_id, sent_id, gene_wordidxs, mention_id, _, supertype, _, _, _, _).

#variant_extract_candidates
function variant_extract_candidates over rows like variant_extract_candidates_input
  returns rows like variant_mentions
  implementation "code/variant_extract_candidates.py" handles tsv lines.

variant_mentions += variant_extract_candidates(doc_id, section_id, sent_id, words) :- sentences_input(doc_id, section_id, sent_id, words, _, _, _, _, _).


#Pheno extract candidates
function pheno_extract_candidates over rows like pheno_extract_candidates_input
  returns rows like pheno_mentions
  implementation "code/pheno_extract_candidates.py" handles tsv lines.

#Here we fill out first this temporary table to avoid dependency loop.
pheno_mentions_without_acronyms += pheno_extract_candidates(doc_id, section_id, sent_id, words, lemmas, poses, ners) :-
sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, _, _).

#And we also fill out pheno_mentions_before_union_1 with the same values so pheno_mentions will be the union of this extractor and of pheno_acronyms_insert_candidates.
pheno_mentions_before_union_1(id, doc_id, section_id, sent_id, wordidxs, mention_id, supertype, subtype, entity, words, is_correct) :-
pheno_mentions_without_acronyms(id, doc_id, section_id, sent_id, wordidxs, mention_id, supertype, subtype, entity, words, is_correct).



#variant_extract_features
function variant_extract_features over rows like variant_extract_features_input
  returns rows like variant_features
  implementation "code/variant_extract_features.py" handles tsv lines.

variant_features( 
 @distributed_by
 doc_id text, 
 section_id text, 
 mention_id text, 
 feature    text).

variant_features += variant_extract_features(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents, mention_id, array_to_string(wordidxs, "|^|")) :- 
sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents), 
variant_mentions_filtered(_, doc_id, section_id, sent_id, wordidxs, mention_id, _, _, _, _, _).


#pheno_filter_candidates
#Create table pheno_mentions_filtered
pheno_mentions_filtered( 
  id bigint,
  @distributed_by 
  doc_id text,
  section_id text,
  sent_id integer,
  wordidxs text,
  mention_id text,
  supertype text,
  subtype text,
  entity text,
  words text,
  is_correct boolean).

pheno_mentions_filtered( id, doc_id, section_id, sent_id, array_to_string(wordidxs, "|^|"), mention_id, supertype, subtype, entity, array_to_string(words, "|^|"), is_correct) *:-
pheno_mentions(id, doc_id, section_id, sent_id, wordidxs, mention_id, supertype, subtype, entity, words, is_correct),
genepheno_relations(_,_,_,_,_,_,_,_,_,mention_id,_,_,_).


#Create table pheno_mention_ids
pheno_mention_ids( 
@distributed_by
doc_id text).

pheno_mention_ids(doc_id) *:- pheno_mentions_filtered(_, doc_id, _, _,_, _, _, _, _, _, _).

#Add dependency for the previous extractor certainly
#pheno_extract_features
function pheno_extract_features over rows like pheno_extract_features_input
returns rows like pheno_features
implementation "code/pheno_extract_features.py" handles tsv lines.

pheno_features += pheno_extract_features(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents, mention_id, array_to_string(wordidxs, "|^|")) :- 
sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents), 
pheno_mentions_filtered(_, doc_id, section_id, sent_id, wordidxs, mention_id, _, _, _, _, _).

    # We first get G-P pairs, then aggregate & serialize them, then do G-P supervision
    # This is to avoide the VMEM error caused by large operations
    # This is also in line with what we will do when we switch to ddlog format

#Create table genepheno_pairs
#get_genepheno_pairs
genepheno_pairs(
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  gene_mention_id text,
  gene_name text,
  gene_wordidxs text, 
  gene_is_correct boolean,
  pheno_mention_id text,
  pheno_entity text,
  pheno_wordidxs text,
  pheno_is_correct boolean).

# Gene and pheno pair candidate
genepheno_pairs(
  doc_id,
  section_id,
  sent_id,
  gene_mention_id,
  gene_name,
  ARRAY_TO_STRING(gene_wordidxs, "|~|"),
  gene_is_correct,
  pheno_mention_id,
  pheno_entity,
  ARRAY_TO_STRING(pheno_wordidxs, "|~|"),
  pheno_is_correct) :-
  gene_mentions(gene_id, doc_id, section_id, sent_id, gene_wordidxs, gene_mention_id, gene_mapping_type, gene_supertype, gene_subtype, gene_name, gene_words, gene_is_correct),
  pheno_mentions(pheno_id, doc_id, section_id, sent_id, pheno_wordidxs, pheno_mention_id, pheno_supertype, pheno_subtype, pheno_entity, pheno_words, pheno_is_correct).

genepheno_pairs_sentences(
  doc_id,
  section_id,
  sent_id,
  array_to_string(ARRAY_AGG(gene_mention_id), "|^|"),
  ARRAY_AGG(gene_name),
  array_to_string(ARRAY_AGG(gene_wordidxs), "|^|"),
  ARRAY_AGG(gene_is_correct),
  array_to_string(ARRAY_AGG(pheno_mention_id), "|^|"),
  ARRAY_AGG(pheno_entity),
  array_to_string(ARRAY_AGG(pheno_wordidxs), "|^|"),
  ARRAY_AGG(pheno_is_correct)
  ) :-
  genepheno_pairs(doc_id, 
                  section_id, 
                  sent_id, 
                  gene_mention_id, 
                  gene_name,
                  gene_wordidxs,
                  gene_is_correct,
                  pheno_mention_id,
                  pheno_entity,
                  pheno_wordidxs,
                  pheno_is_correct).


#get_genevariant_pairs
genevariant_pairs(
  @distributed_by
  doc_id text,
  gene_section_id text,
  gene_sent_id int,
  variant_section_id text,
  variant_sent_id int,
  gene_mention_id text,
  gene_name text,
  gene_wordidxs text,
  gene_is_correct boolean,
  variant_mention_id text,
  variant_entity text,
  variant_wordidxs text,
  variant_type text,
  variant_ivsnum text,
  variant_pos text,
  variant_posplus text,
  variant_frompos text,
  variant_topos text,
  variant_seq text,
  variant_fromseq text,
  variant_toseq text,
  variant_is_correct boolean
).


genevariant_pairs(
    doc_id,
    gene_section_id,
    gene_sent_id,
    variant_section_id,
    variant_sent_id,
    gene_mention_id,
    gene_name,
    array_to_string(gene_wordidxs, "|^|"),
    gene_is_correct,
    variant_mention_id,
    variant_entity,
    array_to_string(variant_wordidxs, "|^|"),
    variant_variant_type,
    variant_ivsnum,
    variant_pos ,
    variant_posplus,
    variant_frompos,
    variant_topos,
    variant_seq,
    variant_fromseq,
    variant_toseq,
    variant_is_correct) :-
    gene_mentions(_, doc_id, gene_section_id, gene_sent_id, gene_wordidxs, gene_mention_id, _, _, _, gene_name, _, gene_is_correct), 
    variant_mentions (variant_id, doc_id, variant_section_id, variant_sent_id, variant_wordidxs, variant_mention_id, variant_supertype, variant_subtype, variant_entity, variant_variant_type, variant_ivsnum, variant_pos, variant_posplus, variant_frompos, variant_topos, variant_seq, variant_fromseq, variant_toseq, variant_words, variant_is_correct).


#non_gene_acronyms_extract_candidates
function non_gene_acronyms_extract_candidates over rows like non_gene_acronyms_extract_candidates_input
returns rows like non_gene_acronyms
implementation "code/non_gene_acronyms_extract_candidates_ddlog.py" handles tsv lines.

#We extract genes from gene_mentions_temp_before_non_gene_acronyms_delete_candidates and non gene_mentions because the first gene extraction is done in gene_mentions_temp_before_non_gene_acronyms_delete_candidates. Then the non_gene_acronyms_delete_candidates will create gene_mentions which will be used in the rest of the run.

#issue solved: call to an elt of an array. Python script modified to take that into account there


non_gene_acronyms_extract_candidates_view_temp_1(doc_id, section_id, sent_id, wordidxs) *:- gene_mentions_temp_before_non_gene_acronyms_delete_candidates(_, doc_id, section_id, sent_id, wordidxs, _, _, _, _, _, _, _).

non_gene_acronyms_extract_candidates_view_temp_2(doc_id, section_id,sent_id, word_string, string_to_array(word_string, "|^|"),  dep_paths, dep_parents, lemmas, poses, ners, wordidxs) :- sentences_input(doc_id, section_id, sent_id, word_string, lemmas, poses, ners, dep_paths, dep_parents), 
non_gene_acronyms_extract_candidates_view_temp_1(doc_id, section_id, sent_id, wordidxs), 
word_string LIKE "%-LRB-%".
#wordidxs[1] instead of wordidxs ideally

non_gene_acronyms += non_gene_acronyms_extract_candidates(doc_id, section_id, sent_id, word_string, dep_paths, dep_parents, lemmas, poses, ners, wordidx)  :- non_gene_acronyms_extract_candidates_view_temp_2(doc_id, section_id, sent_id, word_string, words,  dep_paths, dep_parents, lemmas, poses, ners, wordidx).
#, words[wordidx] LIKE "-LRB-".


#non_gene_acronyms_extract_features
function non_gene_acronyms_extract_features over rows like non_gene_acronyms_extract_features_input
returns rows like non_gene_acronyms_features
implementation "code/non_gene_acronyms_extract_features.py" handles tsv lines.

non_gene_acronyms_features += non_gene_acronyms_extract_features( doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents, mention_id, supertype, array_to_string(short_wordidxs, "|^|"), array_to_string(long_wordidxs, "|^|")) :-
sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents), 
non_gene_acronyms(id, doc_id, section_id, sent_id, short_wordidxs, long_wordidxs, mention_id, supertype, subtype, abbrev, definition, is_correct).

#pheno_acronyms_extract_candidates

function pheno_acronyms_extract_candidates over rows like pheno_acronyms_extract_candidates_input
returns rows like pheno_acronyms
implementation "code/pheno_acronyms_extract_candidates_ddlog.py" handles tsv lines.


pheno_acronyms_extract_candidates_view_temp_1(doc_id, section_id, sent_id, wordidxs, entity) *:- 
pheno_mentions_without_acronyms(id, doc_id, section_id, sent_id, wordidxs, mention_id, supertype, subtype, entity, words, is_correct), 
[is_correct = "t" ; is_correct IS NULL].

pheno_acronyms_extract_candidates_view_temp_2(doc_id, section_id, sent_id, word_string, string_to_array(word_string, "|^|"), dep_paths, dep_parents, lemmas, poses, ners, wordidxs, entity) :-
sentences_input(doc_id, section_id, sent_id, word_string, lemmas, poses, ners, dep_paths, dep_parents), 
pheno_acronyms_extract_candidates_view_temp_1(doc_id, section_id, sent_id, wordidxs, entity), 
[word_string LIKE "%-LRB-%"].

pheno_acronyms += pheno_acronyms_extract_candidates( doc_id, section_id, sent_id, word_string, dep_paths, dep_parents, lemmas, poses, ners, wordidxs, entity) :-
pheno_acronyms_extract_candidates_view_temp_2(doc_id, section_id, sent_id, word_string, words, dep_paths, dep_parents, lemmas, poses, ners, wordidxs, entity).
#[words[wordidxs[array_upper(wordidxs, 1)]+2] LIKE "-LRB-"].


#pheno_acronyms_aggregate_candidates
#Creating table pheno_acronyms_aggregate
pheno_acronyms_aggregate(
  @distributed_by
  doc_id text,
  pa_section_ids text,
  pa_sent_ids text,
  pa_abbrevs text,
  pheno_entities text).

pheno_acronyms_aggregate(doc_id, array_to_string(ARRAY_AGG(section_id), "|^|"), array_to_string(ARRAY_AGG(sent_id), "|^|"), array_to_string(ARRAY_AGG(abbrev), "|^|"), array_to_string(ARRAY_AGG(entity), "|^|")) *:-
pheno_acronyms(id, doc_id, section_id, sent_id, short_wordidxs, long_wordidxs, mention_id, supertype, subtype, abbrev, definition, entity, "t").

pheno_acronyms_ids(
  @distributed_by
  doc_id text).

pheno_acronyms_ids(doc_id) *:- pheno_acronyms_aggregate(doc_id, pa_section_ids, pa_sent_ids, pa_abbrevs, pheno_entities).

#pheno_acronyms_insert_candidates

function pheno_acronyms_insert_candidates over rows like pheno_acronyms_insert_candidates_input
returns rows like pheno_mentions
implementation "code/pheno_acronyms_to_mentions.py" handles tsv lines.

pheno_mentions_before_union_2 += pheno_acronyms_insert_candidates(doc_id, section_id, sent_id, words, lemmas, poses, ners, pa_abbrevs, pheno_entities, pa_section_ids, pa_sent_ids) :-
sentences_input(doc_id,section_id,sent_id,words,lemmas,poses,ners,dep_paths,dep_parents), 
pheno_acronyms_aggregate(doc_id, pa_section_ids, pa_sent_ids, pa_abbrevs, pheno_entities).

#We finally union the two temporary tables pheno_mentions_before_union_1 and 2 in the final table pheno_mentions.
#Hopefully, when the truncating tables done by deepdive will be better dealt for multi processes outputting in the same table, this won't be needed anymore

pheno_mentions(id, doc_id, section_id, sent_id, wordidxs, mention_id, supertype, subtype, entity, words, is_correct) *:-
pheno_mentions_before_union_1(id, doc_id, section_id, sent_id, wordidxs, mention_id, supertype, subtype, entity, words, is_correct);
pheno_mentions_before_union_2(id, doc_id, section_id, sent_id, wordidxs, mention_id, supertype, subtype, entity, words, is_correct).

#pheno_acronyms_extract_features

function pheno_acronyms_extract_features over rows like pheno_acronyms_extract_features_input
returns rows like pheno_acronyms_features
implementation "code/pheno_acronyms_extract_features.py" handles tsv lines.

pheno_acronyms_features += pheno_acronyms_extract_features( doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents, mention_id, supertype, array_to_string(short_wordidxs, "|^|"), array_to_string(long_wordidxs, "|^|")) :-
sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents), 
pheno_acronyms(id, doc_id, section_id, sent_id, short_wordidxs, long_wordidxs, mention_id, supertype, subtype, abbrev, definition, entity, is_correct).


# genepheno_extract_candidates

function genepheno_extract_candidates over rows like genepheno_extract_candidates_input
returns rows like genepheno_relations
implementation "code/genepheno_extract_candidates.py" handles tsv lines.

genepheno_relations += genepheno_extract_candidates( doc_id, section_id, sent_id, words, lemmas, poses, dep_paths, dep_parents, gene_mention_ids, gene_names, gene_wordidxs, gene_is_corrects, pheno_mention_ids, pheno_entities, pheno_wordidxs, pheno_is_corrects) :-
sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents), 
genepheno_pairs_sentences(doc_id, section_id, sent_id, gene_mention_ids, gene_names, gene_wordidxs, gene_is_corrects, pheno_mention_ids, pheno_entities, pheno_wordidxs, pheno_is_corrects).





#Create table gene_to_transcripts
gene_to_transcripts(gene_name text,
            ensembl_ids text,
            ensembl_transcripts text,
            chroms text,
            strands text,
            txstarts text,
            txends text,
            exonstarts text,
            exonends text).

gene_to_transcripts(
            gene_name,
            array_to_string(ARRAY_AGG(ensembl_id), "|~|"),
            array_to_string(ARRAY_AGG(name), "|~|"),
            array_to_string(ARRAY_AGG(chrom), "|~|"),
            array_to_string(ARRAY_AGG(strand), "|~|"),
            array_to_string(ARRAY_AGG(cdsstart), "|~|"),
            array_to_string(ARRAY_AGG(cdsend), "|~|"),
            array_to_string(ARRAY_AGG(exonstarts), "|~|"),
            array_to_string(ARRAY_AGG(exonends), "|~|")) *:-
genes(ensembl_id, canonical_name, gene_name, name_type),
ensgene( bin, name, chrom, strand, txstart, txend, cdsstart, cdsend, exoncount, exonstarts, exonends, score, ensembl_id, cdsstartstat, cdsendstat, exonframes).



#genevariant_extract_candidates

function genevariant_extract_candidates over rows like genevariant_extract_candidates_input
returns rows like genevariant_relations
implementation "code/genevariant_extract_candidates.py" handles tsv lines.

genevariant_relations += genevariant_extract_candidates ( doc_id, variant_section_id, variant_sent_id, variant_entity, variant_wordidxs, variant_type, variant_ivsnum, variant_pos, variant_posplus, variant_frompos, variant_topos, variant_seq, variant_fromseq, variant_toseq, variant_is_correct, array_to_string(ARRAY_AGG(gene_section_id), "|^|"), array_to_string(ARRAY_AGG(gene_sent_id), "|^|"), array_to_string(ARRAY_AGG(gene_wordidxs), "|^|"), array_to_string(ARRAY_AGG(gene_name), "|^|"), array_to_string(ARRAY_AGG(gene_is_correct), "|^|"), array_to_string(ARRAY_AGG(ensembl_ids), "|^|"), array_to_string(ARRAY_AGG(ensembl_transcripts), "|^|"), array_to_string(ARRAY_AGG(chroms), "|^|"), array_to_string(ARRAY_AGG(strands), "|^|"), array_to_string(ARRAY_AGG(txstarts), "|^|"), array_to_string(ARRAY_AGG(txends), "|^|"), array_to_string(ARRAY_AGG(exonstarts), "|^|"), array_to_string(ARRAY_AGG(exonends), "|^|")) :-
genevariant_pairs( doc_id, gene_section_id, gene_sent_id, variant_section_id, variant_sent_id, gene_mention_id, gene_name, gene_wordidxs, gene_is_correct, variant_mention_id, variant_entity, variant_wordidxs, variant_type, variant_ivsnum, variant_pos , variant_posplus, variant_frompos, variant_topos, variant_seq, variant_fromseq, variant_toseq, variant_is_correct),
gene_to_transcripts(gene_name, ensembl_ids, ensembl_transcripts, chroms, strands, txstarts, txends, exonstarts, exonends).

#genevariant_supervise_matching_coding_genes
#supervise true: (into genevariant_supervise_true; stuff where multiple genes in doc, but only one matches variant)
genevariant_coding_supervise_true(
  @distributed_by
  doc_id text,
  mention_id text,
  entity text,
  pos text,
  fromseq text,
  toseq text,
  gene_names text[]).

genevariant_coding_supervise_true(doc_id, mention_id, entity, pos, fromseq, toseq, ARRAY_AGG(gene_name)) *:-
#variant_mentions (id, doc_id, section_id, sent_id, wordidxs, mention_id, supertype, subtype, entity, variant_type, ivsnum, pos, posplus, frompos, topos, seq, fromseq, toseq, words, is_correct), 
variant_mentions (_, doc_id, _, _, _, mention_id, _, _, entity, variant_type,_, pos, posplus, _, _, _, fromseq, toseq, _, _), 
gene_mentions(gene_id, doc_id, _, _, gene_wordidxs, gene_mention_id, gene_mapping_type, gene_supertype, gene_subtype, gene_name, gene_words, gene_is_correct),
genes(ensembl_id, canonical_name, gene_name, name_type),
ensgene( bin, name, chrom, strand, txstart, txend, cdsstart, cdsend, exoncount, exonstarts, exonends, score, ensembl_id, cdsstartstat, cdsendstat, exonframes),
ensembl_gene_sequences (  name, n_seq),
[ARRAY_LENGTH(ARRAY_AGG(gene_name), 1) = 1],
[pos IS NOT NULL, fromseq IS NOT NULL, variant_type LIKE "coding%", fromseq != "U", posplus IS NULL].

#error: for fromseq = n_seq[pos::int]
#error: missing distinct from the HAVING ARRAY_LENGTH(ARRAY_AGG(DISTINCT g.gene_name), 1) = 1
#error: adding order by ?


#create table genevariant_coding_supervise_false
#supervise false: (stuff where multiple genes in the doc, but only one matches above)

genevariant_coding_supervise_false(
  @distributed_by
  doc_id text, 
  variant_entity text, 
  variant_mention_id text, 
  variant_pos text, 
  variant_fromseq text, 
  variant_toseq text, 
  gene_name text
).

genevariant_coding_supervise_false(doc_id, variant_entity, variant_mention_id, variant_pos, variant_fromseq, variant_toseq, gene_name) :-
genevariant_pairs( doc_id, gene_section_id, gene_sent_id, variant_section_id, variant_sent_id, gene_mention_id, gene_name, gene_wordidxs, gene_is_correct, variant_mention_id, variant_entity, variant_wordidxs, variant_type, variant_ivsnum, variant_pos , variant_posplus, variant_frompos, variant_topos, variant_seq, variant_fromseq, variant_toseq, variant_is_correct), 
genevariant_coding_supervise_true(gst_doc_id, variant_mention_id, entity, pos, fromseq, toseq, gst_gene_names),
[gene_name != gst_gene_names].

#genevariant_supervise_matching_proteins
#supervise true: (into genevariant_supervise_true; stuff where multiple genes in doc, but only one matches variant):

genevariant_protein_supervise_true(
  @distributed_by
  doc_id text,
  mention_id text,
  entity text,
  pos text,
  fromseq text,
  toseq text,
  gene_names text[]).


genevariant_protein_supervise_true(doc_id, mention_id, entity, pos, fromseq, toseq, ARRAY_AGG(gene_name)) *:-
variant_mentions (_, doc_id, _, _, _, mention_id, _, _, entity, variant_type,_, pos, posplus, _, _, _, fromseq, toseq, _, _), 
gene_mentions(gene_id, doc_id, _, _, gene_wordidxs, gene_mention_id, gene_mapping_type, gene_supertype, gene_subtype, gene_name, gene_words, gene_is_correct),
genes(ensembl_id, canonical_name, gene_name, name_type),
ensgene( bin, name, chrom, strand, txstart, txend, cdsstart, cdsend, exoncount, exonstarts, exonends, score, ensembl_id, cdsstartstat, cdsendstat, exonframes),
ensembl_protein_sequences (name, n_seq),
[ARRAY_LENGTH(ARRAY_AGG(gene_name), 1) = 1],
[pos IS NOT NULL, fromseq IS NOT NULL, variant_type LIKE "protein%", fromseq != "U", posplus IS NULL].

#error: for fromseq = aa_seq[vm.pos::int]
#error: missing distinct from the HAVING ARRAY_LENGTH(ARRAY_AGG(DISTINCT g.gene_name), 1) = 1
#error: adding order by ?


#create table genevariant_protein_supervise_false
#supervise false: (stuff where multiple genes in the doc, but only one matches above)

genevariant_protein_supervise_false(
  @distributed_by
  doc_id text, 
  variant_entity text, 
  variant_mention_id text, 
  variant_pos text, 
  variant_fromseq text, 
  variant_toseq text, 
  gene_name text
).

genevariant_protein_supervise_false(doc_id, variant_entity, variant_mention_id, variant_pos, variant_fromseq, variant_toseq, gene_name) :-
genevariant_pairs( doc_id, gene_section_id, gene_sent_id, variant_section_id, variant_sent_id, gene_mention_id, gene_name, gene_wordidxs, gene_is_correct, variant_mention_id, variant_entity, variant_wordidxs, variant_type, variant_ivsnum, variant_pos , variant_posplus, variant_frompos, variant_topos, variant_seq, variant_fromseq, variant_toseq, variant_is_correct), 
genevariant_protein_supervise_true(gst_doc_id, variant_mention_id, entity, pos, fromseq, toseq, gst_gene_names),
[gene_name != gst_gene_names].


#gene_filter_candidates
#Create table gene_mentions_filtered
gene_mentions_filtered( 
  id bigint,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id integer,
  wordidxs text,
  @key
  mention_id text,
  mapping_type text,
  supertype text,
  subtype text,
  gene_name text,
  words text,
  is_correct boolean).

gene_mentions_filtered( id, doc_id, section_id, sent_id, array_to_string(wordidxs, "|^|"), mention_id, mapping_type, supertype, subtype, gene_name, array_to_string(words, "|^|"), is_correct) *:-
gene_mentions(id, doc_id, section_id, sent_id, wordidxs, mention_id, mapping_type, supertype, subtype, gene_name, words, is_correct),
genepheno_relations(_,_,_,_,_,mention_id,_,_,_,_,_,_,_).


#Create table gene_mention_ids

gene_mention_ids( 
@distributed_by
doc_id text).

gene_mention_ids(doc_id) *:- gene_mentions_filtered(_, doc_id, _, _, _,_, _, _, _, _, _, _).

#variant_filter_candidates
variant_mentions_filtered(
  id bigint,
  @distributed_by
  doc_id text,
  section_id text,
  sent_id int,
  wordidxs int[],
  mention_id text,
  supertype text,
  subtype text,
  entity text,
  variant_type text,
  ivsNum text,
  pos text,
  posPlus text,
  fromPos text,
  toPos text,
  seq text,
  fromSeq text,
  toSeq text,
  words text[],
  is_correct boolean
).

variant_mentions_filtered(id, doc_id, section_id, sent_id, wordidxs, mention_id, supertype, subtype, entity, variant_type, ivsnum, pos, posplus, frompos, topos, seq, fromseq, toseq, words, is_correct) *:-
variant_mentions(id, doc_id, section_id, sent_id, wordidxs, mention_id, supertype, subtype, entity, variant_type, ivsnum, pos, posplus, frompos, topos, seq, fromseq, toseq, words, is_correct),
genevariant_relations ( _, _, _, _, _, _, _, mention_id, _, _, _, _, _, _, _, _, _, _).

#Pheno_filter_candidates
#? Exctractor seems wrong in the application.conf (What is g ?)

#genepheno_extract_features
function genepheno_extract_features over rows like genepheno_extract_features_input returns rows like genepheno_features
implementation "code/genepheno_extract_features.py" handles tsv lines.

genepheno_features += genepheno_extract_features( relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_wordidxs, pheno_mention_id, pheno_wordidxs, words, lemmas, poses, ners, dep_paths, dep_parents) :- 
genepheno_relations(id,relation_id,doc_id,section_id,sent_id,gene_mention_id,gene_name,gene_wordidxs,gene_is_correct,pheno_mention_id,pheno_entity,pheno_wordidxs,pheno_is_correct),
sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents).


#genepheno_association_supervision
function genepheno_association_supervision over rows like genepheno_association_supervision_input returns rows like genepheno_association_all_superv
implementation "code/genepheno_association_supervision.py" handles tsv lines.

genepheno_association_all_superv += genepheno_association_supervision( relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, gene_is_correct, pheno_mention_id, pheno_entity, pheno_wordidxs, pheno_is_correct, words, lemmas, poses, dep_paths, dep_parents) :-
genepheno_relations(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, gene_is_correct, pheno_mention_id, pheno_entity, pheno_wordidxs, pheno_is_correct), 
sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents).

genepheno_association_all_superv_non_holdout(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype) :-
  genepheno_association_all_superv(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype),
  !EXISTS[genepheno_association_labels(relation_id, _, _)].

genepheno_association_all_superv_holdout(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, NULL, supertype, subtype) :-
  genepheno_association_all_superv(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, _, supertype, subtype),
  EXISTS[genepheno_association_labels(relation_id, _, _)].

genepheno_association(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype) :-
  genepheno_association_all_superv_non_holdout(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype);
  genepheno_association_all_superv_holdout(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype).

#genepheno_causation_supervision

function genepheno_causation_supervision over rows like genepheno_causation_supervision_input returns rows like genepheno_causation_all_superv
implementation "code/genepheno_causation_supervision.py" handles tsv lines.

genepheno_causation_all_superv += genepheno_causation_supervision(relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, gene_is_correct, pheno_mention_id, pheno_entity, pheno_wordidxs, pheno_is_correct, words, lemmas, poses, dep_paths, dep_parents) :-
genepheno_relations(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, gene_is_correct, pheno_mention_id, pheno_entity, pheno_wordidxs, pheno_is_correct), 
sentences_input(doc_id, section_id, sent_id, words, lemmas, poses, ners, dep_paths, dep_parents).

genepheno_causation_all_superv_non_holdout(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype) :-
  genepheno_causation_all_superv(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype),
  !EXISTS[genepheno_causation_labels(relation_id, _, _)].

genepheno_causation_all_superv_holdout(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, NULL, supertype, subtype) :-
  genepheno_causation_all_superv(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, _, supertype, subtype),
  EXISTS[genepheno_causation_labels(relation_id, _, _)].

genepheno_causation(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype) :-
  genepheno_causation_all_superv_non_holdout(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype);
  genepheno_causation_all_superv_holdout(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_name, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype).

#genepheno_no_variant_negatives

variant_mentions_distinct_doc_id_view_temp (doc_id) *:-
variant_mentions (variant_id, doc_id, variant_section_id, variant_sent_id, variant_wordidxs, variant_mention_id, variant_supertype, variant_subtype, variant_entity, variant_variant_type, variant_ivsnum, variant_pos, variant_posplus, variant_frompos, variant_topos, variant_seq, variant_fromseq, variant_toseq, variant_words, variant_is_correct).

genepheno_causation_updated_condition_met(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, "f", "NO_VARIANT_IN_PAPER", subtype) :-
genepheno_causation(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype),  
[is_correct IS NULL],
!EXISTS[variant_mentions_distinct_doc_id_view_temp (var_doc_id), var_doc_id = doc_id].

#Here divided in 2 conditions not met since ddlog doesn't seem able to understand the condition OR (defined by ;) with an EXISTS afterwards

genepheno_causation_updated_condition_not_met_1(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype) :-
genepheno_causation(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype),  
[is_correct IS NOT NULL].

genepheno_causation_updated_condition_not_met_2(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype) :-
genepheno_causation(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype), 
[is_correct IS NULL],
EXISTS[variant_mentions_distinct_doc_id_view_temp (var_doc_id), var_doc_id = doc_id].

genepheno_causation_updated(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype) :-
genepheno_causation_updated_condition_met(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype);
genepheno_causation_updated_condition_not_met_1(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype);
genepheno_causation_updated_condition_not_met_2(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype).

#Idem with genepheno_association

genepheno_association_updated_condition_met(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, "f", "NO_VARIANT_IN_PAPER", subtype) :-
genepheno_association(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype),  
[is_correct IS NULL],
!EXISTS[variant_mentions_distinct_doc_id_view_temp (var_doc_id), var_doc_id = doc_id].

#Here divided in 2 conditions not met since ddlog doesn't seem able to understand the condition OR (defined by ;) with an EXISTS afterwards

genepheno_association_updated_condition_not_met_1(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype) :-
genepheno_association(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype),  
[is_correct IS NOT NULL].

genepheno_association_updated_condition_not_met_2(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype) :-
genepheno_association(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype), 
[is_correct IS NULL],
EXISTS[variant_mentions_distinct_doc_id_view_temp (var_doc_id), var_doc_id = doc_id].

genepheno_association_updated(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype) :-
genepheno_association_updated_condition_met(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype);
genepheno_association_updated_condition_not_met_1(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype);
genepheno_association_updated_condition_not_met_2(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype).


#extract_entity_level_relations
#See if needed, can be done if neccessary

genepheno_causation_canon (
  @distributed_by 
  hpo_id text,
  ensembl_id text
).

genepheno_association_canon (
  @distributed_by 
  hpo_id text,
  ensembl_id text
).

genepheno_causation_inferred (
  @distributed_by 
  hpo_id text,
  ensembl_id text
).

genepheno_association_inferred (
  @distributed_by 
  hpo_id text,
  ensembl_id text
).

function canonicalize_genepheno_relations over rows like genepheno_causation_canon
returns rows like genepheno_causation_canon
implementation "onto/canonicalize_gene_phenotype.sh" handles tsv lines.

genepheno_causation_canon += canonicalize_genepheno_relations(hpo_id, ensembl_id) :-
  genepheno_causation_inferred(hpo_id, ensembl_id).

genepheno_association_canon += canonicalize_genepheno_relations(hpo_id, ensembl_id) :-
  genepheno_association_inferred(hpo_id, ensembl_id).

##### Declare Variable Relations #####

gene_mentions_filtered_inference?(
  @references(relation="gene_mentions_views", column="mention_id")
mention_id text).
#pheno_mentions_filtered_inference?(mention_id text).
genepheno_association_inference?(
  @references(relation="genepheno_association_views", column="relation_id")
relation_id text).
genepheno_causation_inference?(
  @references(relation="genepheno_causation_views", column="relation_id")
relation_id text).
non_gene_acronyms_inference?(mention_id text).
#genevariant_relations_inference?(relation_id text).


#### Supervision Rule #####

#@label(is_correct)
gene_mentions_filtered_inference(mention_id) = is_correct :- gene_mentions_filtered(id, doc_id, section_id, sent_id, wordidxs, mention_id, mapping_type, supertype, subtype, gene_name, words, is_correct).

#@label(is_correct)
#pheno_mentions_filtered_inference(mention_id) :- pheno_mentions_filtered(id, doc_id, section_id, sent_id, wordidxs, mention_id, supertype, subtype, entity, words, is_correct).

@label(is_correct)
genepheno_association_inference(relation_id) :- genepheno_association(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype).

@label(is_correct)
genepheno_causation_inference(relation_id) :- genepheno_causation(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype).

@label(is_correct)
non_gene_acronyms_inference(mention_id) :- non_gene_acronyms(id, doc_id, section_id, sent_id, short_wordidxs, long_wordidxs, mention_id, supertype, subtype, abbrev, definition, is_correct).

#@label(is_correct)
#genevariant_relations_inference(relation_id) :- genevariant_relations ( id, relation_id, doc_id, section1_id, sent1_id, section2_id, sent2_id, variant_mention_id, variant_entity, variant_wordidxs, variant_is_correct, gene_mention_id, gene_name, gene_wordidxs, gene_is_correct, is_correct, supertype, subtype).


### INFERENCE RULES ###

#gene_inference
@weight(feature)
gene_mentions_filtered_inference(mention_id) :-
  gene_mentions_filtered(_, _,_, _, _, mention_id, _, _, _, _, _, is_correct),
  gene_features(_, _, mention_id, feature).

#pheno_inference
#@weight(feature)
#pheno_mentions_filtered_inference(mention_id) :-
#  pheno_mentions_filtered(id, doc_id, section_id, sent_id, wordidxs, mention_id, supertype, subtype, entity, words, is_correct),
#  pheno_features(_, _, mention_id, feature).

#non_gene_acronyms_inference
@weight(feature)
non_gene_acronyms_inference(mention_id) :- non_gene_acronyms(id, doc_id, section_id, sent_id, short_wordidxs, long_wordidxs, mention_id, supertype, subtype, abbrev, definition, is_correct), 
non_gene_acronyms_features (_, _, mention_id, feature).

#genepheno_association_inference
@weight(feature)
genepheno_association_inference(relation_id) :-
  genepheno_association(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype),
  genepheno_features(_, _, relation_id, feature).

#genepheno_causation_inference
@weight(feature)
genepheno_causation_inference(relation_id) :-
  genepheno_causation(id, relation_id, doc_id, section_id, sent_id, gene_mention_id, gene_entity, gene_wordidxs, pheno_mention_id, pheno_entity, pheno_wordidxs, is_correct, supertype, subtype),
  genepheno_features(_, _, relation_id, feature).


#New rule to link the different gene_mentions in a document
@weight("?")
gene_mentions_filtered_inference(mention_id1) = 
gene_mentions_filtered_inference(mention_id2) :-
gene_mentions_filtered(_, doc_id,_, _, _, mention_id1, _, _, _, gene_name, _, _),
gene_mentions_filtered(_, doc_id,_, _, _, mention_id2, _, _, _, gene_name, _, _).



#genepheno_association_to_gene
@weight("?")
genepheno_association_inference(relation_id) => gene_mentions_filtered_inference(gene_mention_id) :-
genepheno_association(_, relation_id, doc_id, section_id, _, gene_mention_id, _, _, _, _, _, _, _, _), 
gene_mentions_filtered(_, doc_id, section_id, _, _, gene_mention_id, _, _, _, _, _, _).

#genepheno_association_to_pheno
#@weight("?")
#genepheno_association_inference(relation_id) => pheno_mentions_filtered_inference(pheno_mention_id) :-
#pheno_mentions_filtered(_, doc_id, section_id, _, _, pheno_mention_id, _,_,_,_,_),
#genepheno_association(_, relation_id, doc_id, section_id, _,_,_,_, pheno_mention_id, _, _, _, _, _).

#genepheno_causation_to_gene
@weight("?")
genepheno_causation_inference(relation_id) => gene_mentions_filtered_inference(gene_mention_id) :-
genepheno_causation(_, relation_id, doc_id, section_id, _, gene_mention_id, _, _, _, _, _, _, _, _), 
gene_mentions_filtered(_, doc_id, section_id, _, _, gene_mention_id, _, _, _, _, _, _).

#genepheno_causation_to_pheno
#@weight("?")
#genepheno_causation_inference(relation_id) => pheno_mentions_filtered_inference(pheno_mention_id) :-
#pheno_mentions_filtered(_, doc_id, section_id, _, _, pheno_mention_id, _,_,_,_,_),
#genepheno_causation(_, relation_id, doc_id, section_id, _,_,_,_, pheno_mention_id, _, _, _, _, _).

#What is difference between variant_inference and genevariant_inference ?
#The variant_inference not even defined as variable, maybe just old stuff

#variant_inference
#@weight(feature)
#variant_mentions_filtered_inference(relation_id) :- 
#variant_mentions_filtered(id, doc_id, section_id, sent_id, wordidxs, mention_id, supertype, subtype, entity, variant_type, ivsnum, pos, posplus, frompos, topos, seq, fromseq, toseq, words, is_correct),
#variant_features ( _, _, mention_id, feature).

#TO FINISH:
#genevariant_inference
#@weight(feature)
#genevariant_relations_inference(relation_id) :-
#genevariant_relations (_, relation_id, _, _, sent1_id, section2_id, sent2_id, variant_mention_id, variant_entity, variant_wordidxs, variant_is_correct, gene_mention_id, gene_name, gene_wordidxs, gene_is_correct, is_correct, supertype, subtype), 
#genevariant_features ( _, _, relation_id, feature).
