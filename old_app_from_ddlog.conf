
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: ORIGINAL
    }
    


      deepdive.schema.variables {
        gene_inference.label: Boolean
pheno_inference.label: Boolean
genepheno_association_inference.label: Boolean
genepheno_causation_inference.label: Boolean
      }
    

          deepdive.extraction.extractors.extraction_rule_0 {
            sql: """ DROP TABLE IF EXISTS sentences CASCADE;
            CREATE TABLE
            sentences(doc_id text,
         section_id text,
         ref_doc_id text,
         sent_id int,
         words text[],
         lemmas text[],
         poses text[],
         ners text[],
         dep_paths text[],
         dep_parents int[])
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_3 {
            sql: """ DROP TABLE IF EXISTS gene_features CASCADE;
            CREATE TABLE
            gene_features(doc_id text,
             section_id text,
             mention_id text,
             feature text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_43 {
            sql: """ DROP TABLE IF EXISTS genepheno_association_inference CASCADE;
            CREATE TABLE
            genepheno_association_inference(relation_id text,
                               id bigint,
                               label boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_42 {
            sql: """ DROP TABLE IF EXISTS pheno_inference CASCADE;
            CREATE TABLE
            pheno_inference(mention_id text,
               id bigint,
               label boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_11 {
            sql: """ DROP TABLE IF EXISTS genepheno_pairs_sentences CASCADE;
            CREATE TABLE
            genepheno_pairs_sentences(doc_id text,
                         section_id text,
                         sent_id int,
                         gene_mention_ids text,
                         gene_entities text[],
                         gene_wordidxs text,
                         gene_is_corrects boolean[],
                         pheno_mention_ids text,
                         pheno_entities text[],
                         pheno_wordidxs text,
                         pheno_is_corrects boolean[])
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_15 {
            sql: """ DROP TABLE IF EXISTS gene_mentions_view CASCADE;
            CREATE TABLE
            gene_mentions_view(id bigint,
                  doc_id text,
                  section_id text,
                  sent_id int,
                  wordidxs int[],
                  mention_id text,
                  supertype text,
                  subtype text,
                  entity text,
                  words text[],
                  is_correct boolean,
                  view_key text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_19 {
            sql: """ DROP TABLE IF EXISTS genepheno_association_view CASCADE;
            CREATE TABLE
            genepheno_association_view(id bigint,
                          relation_id text,
                          doc_id text,
                          section_id text,
                          sent_id int,
                          gene_mention_id text,
                          gene_entity text,
                          gene_wordidxs int[],
                          pheno_mention_id text,
                          pheno_entity text,
                          pheno_wordidxs int[],
                          is_correct boolean,
                          supertype text,
                          subtype text,
                          view_key text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_5 {
            sql: """ DROP TABLE IF EXISTS pheno_features CASCADE;
            CREATE TABLE
            pheno_features(doc_id text,
              section_id text,
              mention_id text,
              feature text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_10 {
            sql: """ DROP TABLE IF EXISTS genepheno_pairs CASCADE;
            CREATE TABLE
            genepheno_pairs(doc_id text,
               section_id text,
               sent_id int,
               gene_mention_id text,
               gene_entity text,
               gene_wordidxs text,
               gene_is_correct boolean,
               pheno_mention_id text,
               pheno_entity text,
               pheno_wordidxs text,
               pheno_is_correct boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_9 {
            sql: """ DROP TABLE IF EXISTS genepheno_features CASCADE;
            CREATE TABLE
            genepheno_features(doc_id text,
                  section_id text,
                  relation_id text,
                  feature text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_2 {
            sql: """ DROP TABLE IF EXISTS gene_mentions CASCADE;
            CREATE TABLE
            gene_mentions(id bigint,
             doc_id text,
             section_id text,
             sent_id int,
             wordidxs int[],
             mention_id text,
             supertype text,
             subtype text,
             entity text,
             words text[],
             is_correct boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_8 {
            sql: """ DROP TABLE IF EXISTS genepheno_causation CASCADE;
            CREATE TABLE
            genepheno_causation(id bigint,
                   relation_id text,
                   doc_id text,
                   section_id text,
                   sent_id int,
                   gene_mention_id text,
                   gene_entity text,
                   gene_wordidxs int[],
                   pheno_mention_id text,
                   pheno_entity text,
                   pheno_wordidxs int[],
                   is_correct boolean,
                   supertype text,
                   subtype text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_7 {
            sql: """ DROP TABLE IF EXISTS genepheno_association CASCADE;
            CREATE TABLE
            genepheno_association(id bigint,
                     relation_id text,
                     doc_id text,
                     section_id text,
                     sent_id int,
                     gene_mention_id text,
                     gene_entity text,
                     gene_wordidxs int[],
                     pheno_mention_id text,
                     pheno_entity text,
                     pheno_wordidxs int[],
                     is_correct boolean,
                     supertype text,
                     subtype text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_6 {
            sql: """ DROP TABLE IF EXISTS genepheno_relations CASCADE;
            CREATE TABLE
            genepheno_relations(id bigint,
                   relation_id text,
                   doc_id text,
                   section_id text,
                   sent_id int,
                   gene_mention_id text,
                   gene_entity text,
                   gene_wordidxs int[],
                   gene_is_correct boolean,
                   pheno_mention_id text,
                   pheno_entity text,
                   pheno_wordidxs int[],
                   pheno_is_correct boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_1 {
            sql: """ DROP TABLE IF EXISTS sentences_input CASCADE;
            CREATE TABLE
            sentences_input(doc_id text,
               section_id text,
               sent_id int,
               words text,
               lemmas text,
               poses text,
               ners text,
               dep_paths text,
               dep_parents text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_21 {
            sql: """ DROP TABLE IF EXISTS genepheno_causation_view CASCADE;
            CREATE TABLE
            genepheno_causation_view(id bigint,
                        relation_id text,
                        doc_id text,
                        section_id text,
                        sent_id int,
                        gene_mention_id text,
                        gene_entity text,
                        gene_wordidxs int[],
                        pheno_mention_id text,
                        pheno_entity text,
                        pheno_wordidxs int[],
                        is_correct boolean,
                        supertype text,
                        subtype text,
                        view_key text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_4 {
            sql: """ DROP TABLE IF EXISTS pheno_mentions CASCADE;
            CREATE TABLE
            pheno_mentions(id bigint,
              doc_id text,
              section_id text,
              sent_id int,
              wordidxs int[],
              mention_id text,
              supertype text,
              subtype text,
              entity text,
              words text[],
              is_correct boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_13 {
            sql: """ DROP TABLE IF EXISTS sentences_view CASCADE;
            CREATE TABLE
            sentences_view(doc_id text,
              section_id text,
              ref_doc_id text,
              sent_id int,
              words text[],
              lemmas text[],
              poses text[],
              ners text[],
              dep_paths text[],
              dep_parents int[],
              view_key text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_41 {
            sql: """ DROP TABLE IF EXISTS gene_inference CASCADE;
            CREATE TABLE
            gene_inference(mention_id text,
              id bigint,
              label boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_44 {
            sql: """ DROP TABLE IF EXISTS genepheno_causation_inference CASCADE;
            CREATE TABLE
            genepheno_causation_inference(relation_id text,
                             id bigint,
                             label boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_17 {
            sql: """ DROP TABLE IF EXISTS pheno_mentions_view CASCADE;
            CREATE TABLE
            pheno_mentions_view(id bigint,
                   doc_id text,
                   section_id text,
                   sent_id int,
                   wordidxs int[],
                   mention_id text,
                   supertype text,
                   subtype text,
                   entity text,
                   words text[],
                   is_correct boolean,
                   view_key text)
            """
            style: "sql_extractor"
          }

        deepdive.extraction.extractors.cleanup {
          sql: """
          TRUNCATE sentences;
          TRUNCATE gene_features;
          TRUNCATE genepheno_association_inference;
          TRUNCATE pheno_inference;
          TRUNCATE genepheno_pairs_sentences;
          TRUNCATE gene_mentions_view;
          TRUNCATE genepheno_association_view;
          TRUNCATE pheno_features;
          TRUNCATE genepheno_pairs;
          TRUNCATE genepheno_features;
          TRUNCATE gene_mentions;
          TRUNCATE genepheno_causation;
          TRUNCATE genepheno_association;
          TRUNCATE genepheno_relations;
          TRUNCATE sentences_input;
          TRUNCATE genepheno_causation_view;
          TRUNCATE pheno_mentions;
          TRUNCATE sentences_view;
          TRUNCATE gene_inference;
          TRUNCATE genepheno_causation_inference;
          TRUNCATE pheno_mentions_view;
          """
          style: "sql_extractor"
        }

      deepdive.extraction.extractors.extraction_rule_49 {
        sql: """ 
        INSERT INTO genepheno_association_inference SELECT DISTINCT R0.relation_id, 0 AS id, R0.is_correct AS label
          FROM genepheno_association R0
        
          
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_38" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_47 {
        sql: """ 
        INSERT INTO pheno_inference SELECT DISTINCT R0.mention_id, 0 AS id, R0.is_correct AS label
          FROM pheno_mentions R0
        
          
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_28" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_32 {
        sql: """ 
        INSERT INTO genepheno_pairs_sentences SELECT R0.doc_id AS "genepheno_pairs.R0.doc_id", R0.section_id AS "genepheno_pairs.R0.section_id", R0.sent_id AS "genepheno_pairs.R0.sent_id", ARRAY_TO_STRING(ARRAY_AGG(R0.gene_mention_id), '|^|') AS column_3, ARRAY_AGG(R0.gene_entity) AS column_4, ARRAY_TO_STRING(ARRAY_AGG(R0.gene_wordidxs), '|^|') AS column_5, ARRAY_AGG(R0.gene_is_correct) AS column_6, ARRAY_TO_STRING(ARRAY_AGG(R0.pheno_mention_id), '|^|') AS column_7, ARRAY_AGG(R0.pheno_entity) AS column_8, ARRAY_TO_STRING(ARRAY_AGG(R0.pheno_wordidxs), '|^|') AS column_9, ARRAY_AGG(R0.pheno_is_correct) AS column_10
FROM genepheno_pairs R0
        
        GROUP BY R0.doc_id, R0.section_id, R0.sent_id
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_31" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_16 {
        sql: """ 
        INSERT INTO gene_mentions_view SELECT R0.id AS "gene_mentions.R0.id", R0.doc_id AS "gene_mentions.R0.doc_id", R0.section_id AS "gene_mentions.R0.section_id", R0.sent_id AS "gene_mentions.R0.sent_id", R0.wordidxs AS "gene_mentions.R0.wordidxs", R0.mention_id AS "gene_mentions.R0.mention_id", R0.supertype AS "gene_mentions.R0.supertype", R0.subtype AS "gene_mentions.R0.subtype", R0.entity AS "gene_mentions.R0.entity", R0.words AS "gene_mentions.R0.words", R0.is_correct AS "gene_mentions.R0.is_correct", (R0.doc_id || ('@' || (R0.section_id || ('@' || R0.sent_id)))) AS column_11
FROM gene_mentions R0
        
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_24" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_20 {
        sql: """ 
        INSERT INTO genepheno_association_view SELECT R0.id AS "genepheno_association.R0.id", R0.relation_id AS "genepheno_association.R0.relation_id", R0.doc_id AS "genepheno_association.R0.doc_id", R0.section_id AS "genepheno_association.R0.section_id", R0.sent_id AS "genepheno_association.R0.sent_id", R0.gene_mention_id AS "genepheno_association.R0.gene_mention_id", R0.gene_entity AS "genepheno_association.R0.gene_entity", R0.gene_wordidxs AS "genepheno_association.R0.gene_wordidxs", R0.pheno_mention_id AS "genepheno_association.R0.pheno_mention_id", R0.pheno_entity AS "genepheno_association.R0.pheno_entity", R0.pheno_wordidxs AS "genepheno_association.R0.pheno_wordidxs", R0.is_correct AS "genepheno_association.R0.is_correct", R0.supertype AS "genepheno_association.R0.supertype", R0.subtype AS "genepheno_association.R0.subtype", (R0.doc_id || ('@' || (R0.section_id || ('@' || R0.sent_id)))) AS column_14
FROM genepheno_association R0
        
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_38" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_31 {
        sql: """ 
        INSERT INTO genepheno_pairs SELECT R0.doc_id AS "gene_mentions.R0.doc_id", R0.section_id AS "gene_mentions.R0.section_id", R0.sent_id AS "gene_mentions.R0.sent_id", R0.mention_id AS "gene_mentions.R0.mention_id", R0.entity AS "gene_mentions.R0.entity", ARRAY_TO_STRING(R0.wordidxs, '|~|') AS column_5, R0.is_correct AS "gene_mentions.R0.is_correct", R1.mention_id AS "pheno_mentions.R1.mention_id", R1.entity AS "pheno_mentions.R1.entity", ARRAY_TO_STRING(R1.wordidxs, '|~|') AS column_9, R1.is_correct AS "pheno_mentions.R1.is_correct"
FROM gene_mentions R0, pheno_mentions R1
        WHERE R1.doc_id = R0.doc_id  AND R1.section_id = R0.section_id  AND R1.sent_id = R0.sent_id 
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_24" ,  "extraction_rule_28" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_12 {
        sql: """ 
        INSERT INTO sentences_input SELECT R0.doc_id AS "sentences.R0.doc_id", R0.section_id AS "sentences.R0.section_id", R0.sent_id AS "sentences.R0.sent_id", ARRAY_TO_STRING(R0.words, '|^|') AS column_3, ARRAY_TO_STRING(R0.lemmas, '|^|') AS column_4, ARRAY_TO_STRING(R0.poses, '|^|') AS column_5, ARRAY_TO_STRING(R0.ners, '|^|') AS column_6, ARRAY_TO_STRING(R0.dep_paths, '|^|') AS column_7, ARRAY_TO_STRING(R0.dep_parents, '|^|') AS column_8
FROM sentences R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_22 {
        sql: """ 
        INSERT INTO genepheno_causation_view SELECT R0.id AS "genepheno_causation.R0.id", R0.relation_id AS "genepheno_causation.R0.relation_id", R0.doc_id AS "genepheno_causation.R0.doc_id", R0.section_id AS "genepheno_causation.R0.section_id", R0.sent_id AS "genepheno_causation.R0.sent_id", R0.gene_mention_id AS "genepheno_causation.R0.gene_mention_id", R0.gene_entity AS "genepheno_causation.R0.gene_entity", R0.gene_wordidxs AS "genepheno_causation.R0.gene_wordidxs", R0.pheno_mention_id AS "genepheno_causation.R0.pheno_mention_id", R0.pheno_entity AS "genepheno_causation.R0.pheno_entity", R0.pheno_wordidxs AS "genepheno_causation.R0.pheno_wordidxs", R0.is_correct AS "genepheno_causation.R0.is_correct", R0.supertype AS "genepheno_causation.R0.supertype", R0.subtype AS "genepheno_causation.R0.subtype", (R0.doc_id || ('@' || (R0.section_id || ('@' || R0.sent_id)))) AS column_14
FROM genepheno_causation R0
        
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_40" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_14 {
        sql: """ 
        INSERT INTO sentences_view SELECT R0.doc_id AS "sentences.R0.doc_id", R0.section_id AS "sentences.R0.section_id", R0.ref_doc_id AS "sentences.R0.ref_doc_id", R0.sent_id AS "sentences.R0.sent_id", R0.words AS "sentences.R0.words", R0.lemmas AS "sentences.R0.lemmas", R0.poses AS "sentences.R0.poses", R0.ners AS "sentences.R0.ners", R0.dep_paths AS "sentences.R0.dep_paths", R0.dep_parents AS "sentences.R0.dep_parents", (R0.doc_id || ('@' || (R0.section_id || ('@' || R0.sent_id)))) AS column_10
FROM sentences R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_45 {
        sql: """ 
        INSERT INTO gene_inference SELECT DISTINCT R0.mention_id, 0 AS id, R0.is_correct AS label
          FROM gene_mentions R0
        
          
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_24" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_51 {
        sql: """ 
        INSERT INTO genepheno_causation_inference SELECT DISTINCT R0.relation_id, 0 AS id, R0.is_correct AS label
          FROM genepheno_causation R0
        
          
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_40" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_18 {
        sql: """ 
        INSERT INTO pheno_mentions_view SELECT R0.id AS "pheno_mentions.R0.id", R0.doc_id AS "pheno_mentions.R0.doc_id", R0.section_id AS "pheno_mentions.R0.section_id", R0.sent_id AS "pheno_mentions.R0.sent_id", R0.wordidxs AS "pheno_mentions.R0.wordidxs", R0.mention_id AS "pheno_mentions.R0.mention_id", R0.supertype AS "pheno_mentions.R0.supertype", R0.subtype AS "pheno_mentions.R0.subtype", R0.entity AS "pheno_mentions.R0.entity", R0.words AS "pheno_mentions.R0.words", R0.is_correct AS "pheno_mentions.R0.is_correct", (R0.doc_id || ('@' || (R0.section_id || ('@' || R0.sent_id)))) AS column_11
FROM pheno_mentions R0
        
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_28" ]
      }
    

        deepdive.extraction.extractors.extraction_rule_24 {
          input: """ SELECT R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R0.words AS "sentences_input.R0.words", R0.dep_paths AS "sentences_input.R0.dep_paths", R0.dep_parents AS "sentences_input.R0.dep_parents", R0.lemmas AS "sentences_input.R0.lemmas", R0.poses AS "sentences_input.R0.poses", R0.ners AS "sentences_input.R0.ners"
FROM sentences_input R0
        
          """
          output_relation: "gene_mentions"
          udf: ${APP_HOME}"/code/gene_extract_candidates.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_12" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.extraction_rule_26 {
          input: """ SELECT R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R0.words AS "sentences_input.R0.words", R0.lemmas AS "sentences_input.R0.lemmas", R0.poses AS "sentences_input.R0.poses", R0.ners AS "sentences_input.R0.ners", R0.dep_paths AS "sentences_input.R0.dep_paths", R0.dep_parents AS "sentences_input.R0.dep_parents", R1.mention_id AS "gene_mentions.R1.mention_id", R1.supertype AS "gene_mentions.R1.supertype", ARRAY_TO_STRING(R1.wordidxs, '|^|') AS column_11
FROM sentences_input R0, gene_mentions R1
        WHERE R1.doc_id = R0.doc_id  AND R1.section_id = R0.section_id  AND R1.sent_id = R0.sent_id 
          """
          output_relation: "gene_features"
          udf: ${APP_HOME}"/code/gene_extract_features.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_12" ,  "extraction_rule_24" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.extraction_rule_28 {
          input: """ SELECT R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R0.words AS "sentences_input.R0.words", R0.lemmas AS "sentences_input.R0.lemmas", R0.poses AS "sentences_input.R0.poses", R0.ners AS "sentences_input.R0.ners"
FROM sentences_input R0
        
          """
          output_relation: "pheno_mentions"
          udf: ${APP_HOME}"/code/pheno_extract_candidates.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_12" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.extraction_rule_30 {
          input: """ SELECT R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R0.words AS "sentences_input.R0.words", R0.lemmas AS "sentences_input.R0.lemmas", R0.poses AS "sentences_input.R0.poses", R0.ners AS "sentences_input.R0.ners", R0.dep_paths AS "sentences_input.R0.dep_paths", R0.dep_parents AS "sentences_input.R0.dep_parents", R1.mention_id AS "pheno_mentions.R1.mention_id", ARRAY_TO_STRING(R1.wordidxs, '|^|') AS column_10
FROM sentences_input R0, pheno_mentions R1
        WHERE R1.doc_id = R0.doc_id  AND R1.section_id = R0.section_id  AND R1.sent_id = R0.sent_id 
          """
          output_relation: "pheno_features"
          udf: ${APP_HOME}"/code/pheno_extract_features.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_12" ,  "extraction_rule_28" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.extraction_rule_34 {
          input: """ SELECT R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R0.words AS "sentences_input.R0.words", R0.lemmas AS "sentences_input.R0.lemmas", R0.poses AS "sentences_input.R0.poses", R0.dep_paths AS "sentences_input.R0.dep_paths", R0.dep_parents AS "sentences_input.R0.dep_parents", R1.gene_mention_ids AS "genepheno_pairs_sentences.R1.gene_mention_ids", R1.gene_entities AS "genepheno_pairs_sentences.R1.gene_entities", R1.gene_wordidxs AS "genepheno_pairs_sentences.R1.gene_wordidxs", R1.gene_is_corrects AS "genepheno_pairs_sentences.R1.gene_is_corrects", R1.pheno_mention_ids AS "genepheno_pairs_sentences.R1.pheno_mention_ids", R1.pheno_entities AS "genepheno_pairs_sentences.R1.pheno_entities", R1.pheno_wordidxs AS "genepheno_pairs_sentences.R1.pheno_wordidxs", R1.pheno_is_corrects AS "genepheno_pairs_sentences.R1.pheno_is_corrects"
FROM sentences_input R0, genepheno_pairs_sentences R1
        WHERE R1.doc_id = R0.doc_id  AND R1.section_id = R0.section_id  AND R1.sent_id = R0.sent_id 
          """
          output_relation: "genepheno_relations"
          udf: ${APP_HOME}"/code/genepheno_extract_candidates.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_12" ,  "extraction_rule_32" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.extraction_rule_36 {
          input: """ SELECT R1.relation_id AS "genepheno_relations.R1.relation_id", R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R1.gene_mention_id AS "genepheno_relations.R1.gene_mention_id", R1.gene_wordidxs AS "genepheno_relations.R1.gene_wordidxs", R1.pheno_mention_id AS "genepheno_relations.R1.pheno_mention_id", R1.pheno_wordidxs AS "genepheno_relations.R1.pheno_wordidxs", R0.words AS "sentences_input.R0.words", R0.lemmas AS "sentences_input.R0.lemmas", R0.poses AS "sentences_input.R0.poses", R0.ners AS "sentences_input.R0.ners", R0.dep_paths AS "sentences_input.R0.dep_paths", R0.dep_parents AS "sentences_input.R0.dep_parents"
FROM sentences_input R0, genepheno_relations R1
        WHERE R1.doc_id = R0.doc_id  AND R1.section_id = R0.section_id  AND R1.sent_id = R0.sent_id 
          """
          output_relation: "genepheno_features"
          udf: ${APP_HOME}"/code/genepheno_extract_features.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_12" ,  "extraction_rule_34" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.extraction_rule_38 {
          input: """ SELECT R1.relation_id AS "genepheno_relations.R1.relation_id", R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R1.gene_mention_id AS "genepheno_relations.R1.gene_mention_id", R1.gene_entity AS "genepheno_relations.R1.gene_entity", R1.gene_wordidxs AS "genepheno_relations.R1.gene_wordidxs", R1.gene_is_correct AS "genepheno_relations.R1.gene_is_correct", R1.pheno_mention_id AS "genepheno_relations.R1.pheno_mention_id", R1.pheno_entity AS "genepheno_relations.R1.pheno_entity", R1.pheno_wordidxs AS "genepheno_relations.R1.pheno_wordidxs", R1.pheno_is_correct AS "genepheno_relations.R1.pheno_is_correct", R0.words AS "sentences_input.R0.words", R0.lemmas AS "sentences_input.R0.lemmas", R0.poses AS "sentences_input.R0.poses", R0.dep_paths AS "sentences_input.R0.dep_paths", R0.dep_parents AS "sentences_input.R0.dep_parents"
FROM sentences_input R0, genepheno_relations R1
        WHERE R1.doc_id = R0.doc_id  AND R1.section_id = R0.section_id  AND R1.sent_id = R0.sent_id 
          """
          output_relation: "genepheno_association"
          udf: ${APP_HOME}"/code/genepheno_association_supervision.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_12" ,  "extraction_rule_34" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.extraction_rule_40 {
          input: """ SELECT R1.relation_id AS "genepheno_relations.R1.relation_id", R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R1.gene_mention_id AS "genepheno_relations.R1.gene_mention_id", R1.gene_entity AS "genepheno_relations.R1.gene_entity", R1.gene_wordidxs AS "genepheno_relations.R1.gene_wordidxs", R1.gene_is_correct AS "genepheno_relations.R1.gene_is_correct", R1.pheno_mention_id AS "genepheno_relations.R1.pheno_mention_id", R1.pheno_entity AS "genepheno_relations.R1.pheno_entity", R1.pheno_wordidxs AS "genepheno_relations.R1.pheno_wordidxs", R1.pheno_is_correct AS "genepheno_relations.R1.pheno_is_correct", R0.words AS "sentences_input.R0.words", R0.lemmas AS "sentences_input.R0.lemmas", R0.poses AS "sentences_input.R0.poses", R0.dep_paths AS "sentences_input.R0.dep_paths", R0.dep_parents AS "sentences_input.R0.dep_parents"
FROM sentences_input R0, genepheno_relations R1
        WHERE R1.doc_id = R0.doc_id  AND R1.section_id = R0.section_id  AND R1.sent_id = R0.sent_id 
          """
          output_relation: "genepheno_causation"
          udf: ${APP_HOME}"/code/genepheno_causation_supervision.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_12" ,  "extraction_rule_34" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.inference.factors.inference_rule_0 {
          input_query: """
          SELECT R0.id AS "gene_inference.R0.id" , R2.feature AS "dd_weight_column_0" 
          FROM gene_inference R0, gene_mentions R1, gene_features R2
        WHERE R1.mention_id = R0.mention_id  AND R2.doc_id = R1.doc_id  AND R2.section_id = R1.section_id  AND R2.mention_id = R0.mention_id """
          function: "Imply(gene_inference.R0.label)"
          weight: "?(dd_weight_column_0)"
        }
      

        deepdive.inference.factors.inference_rule_1 {
          input_query: """
          SELECT R0.id AS "pheno_inference.R0.id" , R2.feature AS "dd_weight_column_0" 
          FROM pheno_inference R0, pheno_mentions R1, pheno_features R2
        WHERE R1.mention_id = R0.mention_id  AND R2.doc_id = R1.doc_id  AND R2.section_id = R1.section_id  AND R2.mention_id = R0.mention_id """
          function: "Imply(pheno_inference.R0.label)"
          weight: "?(dd_weight_column_0)"
        }
      

        deepdive.inference.factors.inference_rule_2 {
          input_query: """
          SELECT R0.id AS "genepheno_association_inference.R0.id" , R2.feature AS "dd_weight_column_0" 
          FROM genepheno_association_inference R0, genepheno_association R1, genepheno_features R2
        WHERE R1.relation_id = R0.relation_id  AND R2.doc_id = R1.doc_id  AND R2.section_id = R1.section_id  AND R2.relation_id = R0.relation_id """
          function: "Imply(genepheno_association_inference.R0.label)"
          weight: "?(dd_weight_column_0)"
        }
      

        deepdive.inference.factors.inference_rule_3 {
          input_query: """
          SELECT R0.id AS "genepheno_causation_inference.R0.id" , R2.feature AS "dd_weight_column_0" 
          FROM genepheno_causation_inference R0, genepheno_causation R1, genepheno_features R2
        WHERE R1.relation_id = R0.relation_id  AND R2.doc_id = R1.doc_id  AND R2.section_id = R1.section_id  AND R2.relation_id = R0.relation_id """
          function: "Imply(genepheno_causation_inference.R0.label)"
          weight: "?(dd_weight_column_0)"
        }
      

        deepdive.inference.factors.inference_rule_4 {
          input_query: """
          SELECT R0.id AS "genepheno_association_inference.R0.id" , R1.id AS "gene_inference.R1.id" 
          FROM genepheno_association_inference R0, gene_inference R1, gene_mentions R2, genepheno_association R3
        WHERE R2.mention_id = R1.mention_id  AND R3.relation_id = R0.relation_id  AND R3.doc_id = R2.doc_id  AND R3.section_id = R2.section_id  AND R3.gene_mention_id = R1.mention_id """
          function: "Imply(genepheno_association_inference.R0.label, gene_inference.R1.label)"
          weight: "?"
        }
      

        deepdive.inference.factors.inference_rule_5 {
          input_query: """
          SELECT R0.id AS "genepheno_association_inference.R0.id" , R1.id AS "pheno_inference.R1.id" 
          FROM genepheno_association_inference R0, pheno_inference R1, pheno_mentions R2, genepheno_association R3
        WHERE R2.mention_id = R1.mention_id  AND R3.relation_id = R0.relation_id  AND R3.doc_id = R2.doc_id  AND R3.section_id = R2.section_id  AND R3.pheno_mention_id = R1.mention_id """
          function: "Imply(genepheno_association_inference.R0.label, pheno_inference.R1.label)"
          weight: "?"
        }
      

        deepdive.inference.factors.inference_rule_6 {
          input_query: """
          SELECT R0.id AS "genepheno_causation_inference.R0.id" , R1.id AS "gene_inference.R1.id" 
          FROM genepheno_causation_inference R0, gene_inference R1, gene_mentions R2, genepheno_causation R3
        WHERE R2.mention_id = R1.mention_id  AND R3.relation_id = R0.relation_id  AND R3.doc_id = R2.doc_id  AND R3.section_id = R2.section_id  AND R3.gene_mention_id = R1.mention_id """
          function: "Imply(genepheno_causation_inference.R0.label, gene_inference.R1.label)"
          weight: "?"
        }
      

        deepdive.inference.factors.inference_rule_7 {
          input_query: """
          SELECT R0.id AS "genepheno_causation_inference.R0.id" , R1.id AS "pheno_inference.R1.id" 
          FROM genepheno_causation_inference R0, pheno_inference R1, pheno_mentions R2, genepheno_causation R3
        WHERE R2.mention_id = R1.mention_id  AND R3.relation_id = R0.relation_id  AND R3.doc_id = R2.doc_id  AND R3.section_id = R2.section_id  AND R3.pheno_mention_id = R1.mention_id """
          function: "Imply(genepheno_causation_inference.R0.label, pheno_inference.R1.label)"
          weight: "?"
        }
      
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.initdb: [extraction_rule_0, extraction_rule_3, extraction_rule_43, extraction_rule_42, extraction_rule_11, extraction_rule_15, extraction_rule_19, extraction_rule_5, extraction_rule_10, extraction_rule_9, extraction_rule_2, extraction_rule_8, extraction_rule_7, extraction_rule_6, extraction_rule_1, extraction_rule_21, extraction_rule_4, extraction_rule_13, extraction_rule_41, extraction_rule_44, extraction_rule_17]
deepdive.pipeline.pipelines.extraction: [extraction_rule_47, extraction_rule_36, extraction_rule_28, extraction_rule_12, extraction_rule_20, extraction_rule_16, extraction_rule_31, extraction_rule_32, extraction_rule_22, extraction_rule_26, extraction_rule_18, extraction_rule_49, extraction_rule_30, extraction_rule_45, extraction_rule_38, extraction_rule_34, extraction_rule_14, extraction_rule_24, extraction_rule_40, extraction_rule_51]
deepdive.pipeline.pipelines.inference: [inference_rule_0, inference_rule_1, inference_rule_2, inference_rule_3, inference_rule_4, inference_rule_5, inference_rule_6, inference_rule_7]
deepdive.pipeline.pipelines.endtoend: [extraction_rule_47, extraction_rule_36, extraction_rule_28, extraction_rule_12, extraction_rule_20, extraction_rule_16, extraction_rule_31, extraction_rule_32, extraction_rule_22, extraction_rule_26, extraction_rule_18, extraction_rule_49, extraction_rule_30, extraction_rule_45, extraction_rule_38, extraction_rule_34, extraction_rule_14, extraction_rule_24, extraction_rule_40, extraction_rule_51, inference_rule_0, inference_rule_1, inference_rule_2, inference_rule_3, inference_rule_4, inference_rule_5, inference_rule_6, inference_rule_7]
deepdive.pipeline.pipelines.cleanup: [cleanup]
