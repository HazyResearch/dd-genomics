deepdive {

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
    gphost   : ${GPHOST}
    gpport   : ${GPPORT}
    gppath   : ${GPPATH}
  }

  # Parallel grounding for GreenPlum
  inference.parallel_grounding: ${PARALLEL_GROUNDING}

  # holdout fraction for calibration
  calibration.holdout_fraction: 0.1

  # Execute one extractor at a time (but we use parallelism for extractors)
  extraction.parallelism: 1


  ### PIPELINES ###
  pipeline.run: ${GDD_PIPELINE}
  pipeline.pipelines {
    none: [
    ]
    genevar: [
      genevar_extract_candidates
    ]
    genevarpheno: [
      genevarpheno_extract_candidates,
      genevarpheno_extract_features,
      genevarpheno_inference
    ]
    test_nlp: [
      test_nlp_extractor
    ]
    new_sentences: [
      sentences_to_input_format
    ]
    plos_doi_to_pmid: [
      plos_doi_to_pmid
    ]
    only_sentences_with_genes: [
      gene_extract_candidates,
      join_sentences_input_gene_mentions
    ]
    gene: [
      gene_extract_candidates,
      gene_extract_features,
      gene_inference
    ]
    all_no_joint: [
      gene_extract_candidates, 
      gene_extract_features, 
      gene_inference,
      pheno_extract_candidates, 
      pheno_extract_features,
      pheno_inference,
      genepheno_extract_candidates,
      genepheno_extract_features,
      genepheno_causation_supervision,
      genepheno_causation_inference,
      genepheno_association_supervision,
      genepheno_association_inference
    ]
    all: [
      gene_extract_candidates, 
      gene_extract_features, 
      gene_inference,
      pheno_extract_candidates, 
      pheno_extract_features,
      pheno_inference,
      genepheno_extract_candidates,
      genepheno_causation_supervision,
      genepheno_extract_features,
      genepheno_causation_inference,
      genepheno_causation_to_gene,
      genepheno_causation_to_pheno
      genepheno_association_supervision,
      genepheno_association_inference,
      genepheno_association_to_gene,
      genepheno_association_to_pheno
    ]
    all_no_inference: [
      gene_extract_candidates, 
      gene_extract_features, 
      pheno_extract_candidates, 
      pheno_extract_features,
      genepheno_extract_candidates,
      genepheno_causation_supervision,
      genepheno_extract_features
      genepheno_association_supervision,
    ]
    gene: [
      gene_extract_candidates, 
      gene_extract_features, 
      gene_inference
    ]
    non_gene_acronyms: [
      non_gene_acronyms_extract_candidates,
      non_gene_acronyms_extract_features,
      non_gene_acronyms_inference
    ]
    non_gene_acronyms_candidates: [
      non_gene_acronyms_extract_candidates
    ]
    gene_candidates: [
      gene_extract_candidates
    ]
    gene_features: [
      gene_extract_features
    ]
    gene_inference: [
      gene_inference
    ]
    gene_no_inference: [
      gene_extract_candidates, 
      gene_extract_features 
    ]
    pheno: [
      pheno_extract_candidates, 
      pheno_extract_features, 
      pheno_inference
    ]
    pheno_candidates: [
      pheno_extract_candidates
    ]
    pheno_features: [
      pheno_extract_features
    ]
    pheno_inference: [
      pheno_inference
    ]
    pheno_no_inference: [
      pheno_extract_candidates, 
      pheno_extract_features
    ] 
    gene_and_pheno: [
      gene_extract_candidates, 
      gene_extract_features, 
      gene_inference,
      pheno_extract_candidates, 
      pheno_extract_features, 
      pheno_inference
    ] 
    genepheno: [
      genepheno_extract_candidates,
      genepheno_causation_supervision,
      genepheno_extract_features,
      genepheno_causation_inference,
      genepheno_causation_to_gene,
      genepheno_causation_to_pheno,
      genepheno_association_supervision,
      genepheno_association_inference,
      genepheno_association_to_gene,
      genepheno_association_to_pheno
    ]
    genepheno_no_joint: [
      genepheno_extract_candidates,
      genepheno_causation_supervision,
      genepheno_extract_features,
      genepheno_causation_inference,
      genepheno_association_supervision,
      genepheno_association_inference
    ]
    genepheno_no_inference: [
      genepheno_extract_candidates,
      genepheno_causation_supervision,
      genepheno_extract_features,
      genepheno_association_supervision,
    ]
    genepheno_candidates: [
      genepheno_causation_supervision,
      genepheno_association_supervision
    ]
    genepheno_features: [
      genepheno_extract_features,
    ]
    genepheno_inference: [
      genepheno_causation_inference,
      genepheno_association_inference
    ]
    inference_no_joint: [
      gene_inference,
      pheno_inference,
      genepheno_causation_inference,
      genepheno_association_inference
    ]
    api_postprocess: [
      extract_entity_level_relations
    ] 
  }


### EXTRACTORS ###
  extraction.extractors {

    sentences_to_input_format: {
      style: sql_extractor
      sql: """
        DROP TABLE IF EXISTS sentences_input CASCADE;
        CREATE TABLE 
          sentences_input
        AS SELECT
          doc_id,
          section_id,
          sent_id,
          array_to_string(words, '|^|') AS words,
          array_to_string(lemmas, '|^|') AS lemmas,
          array_to_string(poses, '|^|') AS poses,
          array_to_string(ners, '|^|') AS ners,
          array_to_string(dep_paths, '|^|') AS dep_paths,
          array_to_string(dep_parents, '|^|') AS dep_parents
        FROM
          sentences;
      """
    }

    join_sentences_input_gene_mentions: {
      style: sql_extractor
      sql: """
        DROP TABLE IF EXISTS sentences_input2;
        CREATE TABLE sentences_input2 AS SELECT * FROM sentences_input;
        DROP TABLE sentences_input;
        CREATE TABLE sentences_input AS (
          SELECT distinct si.*
          FROM
            sentences_input2 si
            JOIN gene_mentions gm
             ON (si.doc_id = gm.doc_id AND si.section_id = gm.section_id AND si.sent_id = gm.sent_id)
        );
      """
      dependencies: [gene_extract_candidates]
    }

    test_nlp_extractor: {
      style: tsv_extractor
      input: """
        SELECT
          doc_id,
          section_id,
          sent_id,
          string_to_array(dep_parents, '|^|') as dep_parents,
          string_to_array(dep_paths, '|^|') as dep_paths,
          string_to_array(words, '|^|') as words
        FROM
          sentences_input
        LIMIT 100
      """
      output_relation: test_nlp
      udf: ${APP_HOME}/code/test_nlp.py
      parallelism: ${PARALLELISM}
    }

    plos_doi_to_pmid: {
      style: tsv_extractor
      input: """ SELECT 1, 2, 3 """
      output_relation: plos_doi_to_pmid
      udf: cat ${APP_HOME}/onto/data/plos_doi_to_pmid.tsv
      parallelism: ${PARALLELISM}
    }

    gene_extract_candidates: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} gene_mentions
      style: tsv_extractor
      input: """
        SELECT
          doc_id,
          section_id,
          sent_id,
          words,
          dep_paths,
          dep_parents,
          lemmas,
          poses,
          ners
        FROM 
          sentences_input
      """
      output_relation: gene_mentions
      udf: ${APP_HOME}/code/gene_extract_candidates.py
      parallelism: ${PARALLELISM}
    }

    gene_extract_features: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} gene_features
      style: tsv_extractor
      input: """
        SELECT 
          s.doc_id,
          s.section_id,
          s.sent_id,
          s.words,
          s.lemmas,
          s.poses,
          s.ners,
          s.dep_paths,
          s.dep_parents,
          m.mention_id,
          m.supertype,
          array_to_string(m.wordidxs, '|^|')
        FROM 
          sentences_input s,
          gene_mentions m
        WHERE 
          s.doc_id = m.doc_id
          AND s.section_id = m.section_id
          AND s.sent_id = m.sent_id
      """
      output_relation: gene_features
      udf: ${APP_HOME}/code/gene_extract_features.py
      parallelism: ${PARALLELISM}
      dependencies: [gene_extract_candidates]
    }

    genevar_extract_candidates: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} genevar_mentions
      style: tsv_extractor
      input: """
        SELECT
          doc_id,
          section_id,
          sent_id,
          words
        FROM 
          sentences_input
      """
      output_relation: genevar_mentions
      udf: ${APP_HOME}/code/genevar_extract_candidates.py
      parallelism: ${PARALLELISM}
    }

    # NOTE: input_batch_size extended because Robin thought that the init cost was highest
    # TODO -> re-evaluate this / test..?   
    pheno_extract_candidates: {
      before: ${APP_HOME}/util/pheno_extract_candidates_before.sh
      style: tsv_extractor
      input: """
        SELECT 
          doc_id,
          section_id,
          sent_id,
          words,
          lemmas,
          poses,
          ners
        FROM 
          sentences_input
      """
      output_relation: pheno_mentions
      udf: ${APP_HOME}/code/pheno_extract_candidates.py
      parallelism: ${PARALLELISM}
      input_batch_size: 100000
    }

    pheno_extract_features: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} pheno_features
      style: tsv_extractor
      input: """
        SELECT 
          s.doc_id,
          s.section_id,
          s.sent_id,
          s.words,
          s.lemmas,
          s.poses,
          s.ners,
          s.dep_paths,
          s.dep_parents,
          m.mention_id,
          array_to_string(m.wordidxs, '|^|')
        FROM 
          sentences_input s,
          pheno_mentions m
        WHERE 
          s.doc_id = m.doc_id 
          AND s.section_id = m.section_id
          AND s.sent_id = m.sent_id
      """
      output_relation: pheno_features
      udf: ${APP_HOME}/code/pheno_extract_features.py
      parallelism: ${PARALLELISM}
      dependencies: [pheno_extract_candidates]
    }
    
    non_gene_acronyms_extract_candidates: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} non_gene_acronyms
      style: tsv_extractor
      input: """
        SELECT
          doc_id,
          section_id,
          sent_id,
          words,
          dep_paths,
          dep_parents,
          lemmas,
          poses,
          ners
        FROM 
          sentences_input
        WHERE
          words LIKE '%-LRB-%'
      """
      output_relation: non_gene_acronyms
      udf: ${APP_HOME}/code/non_gene_acronyms_extract_candidates.py
      parallelism: ${PARALLELISM}
    }

    non_gene_acronyms_extract_features: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} non_gene_acronyms_features
      style: tsv_extractor
      input: """
        SELECT 
          s.doc_id,
          s.section_id,
          s.sent_id,
          s.words,
          s.lemmas,
          s.poses,
          s.ners,
          s.dep_paths,
          s.dep_parents,
          m.mention_id,
          m.supertype,
          array_to_string(m.short_wordidxs, '|^|'),
          array_to_string(m.long_wordidxs, '|^|')
        FROM 
          sentences_input s,
          non_gene_acronyms m
        WHERE 
          s.doc_id = m.doc_id
          AND s.section_id = m.section_id
          AND s.sent_id = m.sent_id
      """
      output_relation: non_gene_acronyms_features
      udf: ${APP_HOME}/code/gene_extract_features.py
      parallelism: ${PARALLELISM}
      dependencies: [non_gene_acronyms_extract_candidates]
    }

    genepheno_extract_candidates: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} genepheno_relations
      style: tsv_extractor
      input: """
        SELECT
          s.doc_id,
          s.section_id,
          s.sent_id,
          s.words,
          s.lemmas,
          s.poses,
          s.dep_paths,
          s.dep_parents,
          g.mention_ids AS gene_mention_ids,
          g.entities AS gene_entities,
          g.wordidxs AS gene_wordidxs,
          g.is_corrects AS gene_is_corrects,
          p.mention_ids AS pheno_mention_ids,
          p.entities AS pheno_entities,
          p.wordidxs AS pheno_wordidxs,
          p.is_corrects AS pheno_is_corrects
        FROM
          sentences_input s,
          (
            SELECT
              doc_id,
              section_id,
              sent_id,
              array_to_string(ARRAY_AGG(mention_id), '|^|') AS mention_ids,
              ARRAY_AGG(entity) AS entities,
              array_to_string(ARRAY_AGG(array_to_string(wordidxs, '|^|')), '|~|') AS wordidxs,
              ARRAY_AGG(is_correct) AS is_corrects
            FROM
              gene_mentions
            GROUP BY
              doc_id, section_id, sent_id
          ) g,
          (
            SELECT
              doc_id,
              section_id,
              sent_id,
              array_to_string(ARRAY_AGG(mention_id), '|^|') AS mention_ids,
              ARRAY_AGG(entity) AS entities,
              array_to_string(ARRAY_AGG(array_to_string(wordidxs, '|^|')), '|~|') AS wordidxs,
              ARRAY_AGG(is_correct) AS is_corrects
            FROM
              pheno_mentions
            GROUP BY
              doc_id, section_id, sent_id
          ) p
        WHERE
          s.doc_id = g.doc_id
          AND s.section_id = g.section_id
          AND s.sent_id = g.sent_id
          AND s.doc_id = p.doc_id
          AND s.section_id = p.section_id
          AND s.sent_id = p.sent_id
        """
      output_relation: genepheno_relations
      udf: ${APP_HOME}/code/genepheno_extract_candidates.py
      parallelism: ${PARALLELISM}
      dependencies: [gene_extract_candidates, pheno_extract_candidates]
    }
    
    genepheno_extract_features: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} genepheno_features
      style: tsv_extractor
      input: """SELECT
              r.relation_id,
              r.doc_id,
              r.section_id,
              r.sent_id,
              r.gene_mention_id,
              r.gene_wordidxs,
              r.pheno_mention_id,
              r.pheno_wordidxs,
              s.words,
              s.lemmas,
              s.poses,
              s.ners,
              s.dep_paths,
              s.dep_parents
           FROM
              genepheno_relations r,
              sentences_input s
          WHERE
              r.doc_id = s.doc_id
              AND r.section_id = s.section_id
              AND r.sent_id = s.sent_id
        """
      output_relation: genepheno_features
      udf: ${APP_HOME}/code/genepheno_extract_features.py
      parallelism: ${PARALLELISM}
      dependencies: [genepheno_extract_candidates]
    }

    genepheno_association_supervision: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} genepheno_association
      style: tsv_extractor
      input: """SELECT 
        r.relation_id,
        r.doc_id,
        r.section_id
        r.sent_id,
        r.gene_mention_id,
        r.gene_entity,
        r.gene_wordidxs,
        r.gene_is_correct,
        r.pheno_mention_id,
        r.pheno_entity,
        r.pheno_wordidxs,
        r.pheno_is_correct,
        s.words,
        s.lemmas,
        s.poses,
        s.dep_paths,
        s.dep_parents
      FROM 
        genepheno_relations r
        join sentences_input s on (r.doc_id = s.doc_id AND r.section_id = s.section_id AND r.sent_id = s.sent_id)
      """
      output_relation: genepheno_association
      udf: ${APP_HOME}/code/genepheno_association_supervision.py
      parallelism: ${PARALLELISM}
      dependencies: [genepheno_extract_candidates]
    }

    genepheno_causation_supervision: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} genepheno_causation
      style: tsv_extractor
      input: """SELECT 
        r.relation_id,
        r.doc_id,
        r.section_id,
        r.sent_id,
        r.gene_mention_id,
        r.gene_entity,
        r.gene_wordidxs,
        r.gene_is_correct,
        r.pheno_mention_id,
        r.pheno_entity,
        r.pheno_wordidxs,
        r.pheno_is_correct,
        s.words,
        s.lemmas,
        s.poses,
        s.dep_paths,
        s.dep_parents
      FROM 
        genepheno_relations r
        join sentences_input s on (r.doc_id = s.doc_id AND r.section_id = s.section_id AND r.sent_id = s.sent_id)
      """
      output_relation: genepheno_causation
      udf: ${APP_HOME}/code/genepheno_causation_supervision.py
      parallelism: ${PARALLELISM}
      dependencies: [genepheno_extract_candidates]
    }

    genevarpheno_extract_candidates: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} genevarpheno_relations
      style: tsv_extractor
      input: """
        SELECT
          s.doc_id,
          s.section_id,
          s.sent_id,
          s.words,
          s.lemmas,
          s.poses,
          s.dep_paths,
          s.dep_parents,
          gv.mention_ids AS genevar_mention_ids,
          gv.entities AS genevar_entities,
          gv.wordidxs AS genevar_wordidxs,
          gv.is_corrects AS genevar_is_corrects,
          p.mention_ids AS pheno_mention_ids,
          p.entities AS pheno_entities,
          p.wordidxs AS pheno_wordidxs,
          p.is_corrects AS pheno_is_corrects
        FROM
          sentences_input s,
          (
            SELECT
              doc_id,
              section_id,
              sent_id,
              array_to_string(ARRAY_AGG(mention_id), '|^|') AS mention_ids,
              ARRAY_AGG(entity) AS entities,
              array_to_string(ARRAY_AGG(array_to_string(wordidxs, '|^|')), '|~|') AS wordidxs,
              ARRAY_AGG(is_correct) AS is_corrects
            FROM
              genevar_mentions
            GROUP BY
              doc_id, section_id, sent_id
          ) gv,
          (
            SELECT
              doc_id,
              section_id,
              sent_id,
              array_to_string(ARRAY_AGG(mention_id), '|^|') AS mention_ids,
              ARRAY_AGG(entity) AS entities,
              array_to_string(ARRAY_AGG(array_to_string(wordidxs, '|^|')), '|~|') AS wordidxs,
              ARRAY_AGG(is_correct) AS is_corrects
            FROM
              pheno_mentions
            GROUP BY
              doc_id, section_id, sent_id
          ) p
        WHERE
          s.doc_id = gv.doc_id
          AND s.section_id = gv.section_id
          AND s.sent_id = gv.sent_id
          AND s.doc_id = p.doc_id
          AND s.section_id = p.section_id
          AND s.sent_id = p.sent_id
        """
      output_relation: genevarpheno_relations
      udf: ${APP_HOME}/code/genevarpheno_extract_candidates.py
      parallelism: ${PARALLELISM}
      dependencies: [genevar_extract_candidates, pheno_extract_candidates]
    }
    
    genevarpheno_extract_features: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} genevarpheno_features
      style: tsv_extractor
      input: """SELECT
              r.relation_id,
              r.doc_id,
              r.section_id,
              r.sent_id,
              r.genevar_mention_id,
              r.genevar_wordidxs,
              r.pheno_mention_id,
              r.pheno_wordidxs,
              s.words,
              s.lemmas,
              s.poses,
              s.ners,
              s.dep_paths,
              s.dep_parents
           FROM
              genevarpheno_relations r,
              sentences_input s
          WHERE
              r.doc_id = s.doc_id
              AND r.section_id = s.section_id
              AND r.sent_id = s.sent_id
        """
      output_relation: genevarpheno_features
      udf: ${APP_HOME}/code/genevarpheno_extract_features.py
      parallelism: ${PARALLELISM}
      dependencies: [genevarpheno_extract_candidates]
    }

    extract_entity_level_relations: {
      style: sql_extractor
      sql: """
        DROP TABLE IF EXISTS genepheno_entity_level;
        CREATE TABLE genepheno_entity_level AS (
          SELECT
            gpa.gene_entity AS gene_entity,
            gpa.pheno_entity AS pheno_entity,
            ARRAY_AGG(gpa.relation_id) AS relation_ids,
            ARRAY_AGG(gpa.doc_id) AS doc_ids,
            ARRAY_AGG(gpa.section_id) AS section_ids,
            ARRAY_AGG(gpa.sent_id) AS sent_ids,
            ARRAY_AGG(array_to_string(gpa.gene_wordidxs, '|^|')) AS gene_wordidxs,
            ARRAY_AGG(array_to_string(gpa.pheno_wordidxs, '|^|')) AS pheno_wordidxs,
            ARRAY_AGG(si.words) AS words,
            ARRAY_AGG(gpa.expectation) AS a_expectations,
            ARRAY_AGG(gpc.expectation) AS c_expectations,
            MAX(gpa.expectation) AS max_a_expectation,
            MAX(gpc.expectation) AS max_c_expectation
          FROM
            genepheno_association_is_correct_inference gpa,
            genepheno_causation_is_correct_inference gpc,
            sentences_input si
          WHERE
            gpa.relation_id = gpc.relation_id
            AND gpa.doc_id = si.doc_id AND gpa.section_id = si.section_id AND gpa.sent_id = si.sent_id
            AND (gpa.expectation > 0.5 OR gpc.expectation > 0.5)
          GROUP BY
            gpa.gene_entity, gpa.pheno_entity
        );
      """
    }
  }


### SCHEMA ###

  # Random variables
  schema.variables {
    gene_mentions.is_correct: Boolean
    pheno_mentions.is_correct: Boolean
    genepheno_association.is_correct: Boolean
    genepheno_causation.is_correct: Boolean
    genevarpheno_relations.is_correct: Boolean
  }


### INFERENCE RULES ###

  # Inference rules
  inference.factors {
    gene_inference {
      input_query = """
        SELECT 
          gm.id as "gene_mentions.id",
          gm.is_correct as "gene_mentions.is_correct",
          gf.feature as "gene_features.feature"
        FROM
          gene_mentions gm,
          gene_features gf
        WHERE 
          gm.mention_id = gf.mention_id;
      """
      function: IsTrue(gene_mentions.is_correct)
      weight: "?(gene_features.feature)"
    }

    pheno_inference {
      input_query = """
        SELECT 
          pm.id as "pheno_mentions.id",
          pm.is_correct as "pheno_mentions.is_correct",
          pf.feature as "pheno_features.feature"
        FROM 
          pheno_mentions pm, 
          pheno_features pf
        WHERE 
          pm.mention_id = pf.mention_id;
      """
      function: IsTrue(pheno_mentions.is_correct)
      weight: "?(pheno_features.feature)"
    }

    genepheno_association_inference {
      input_query = """
        SELECT 
          gpr.id as "genepheno_association.id",
          gpr.is_correct as "genepheno_association.is_correct",
          gpf.feature as "genepheno_features.feature"
        FROM 
          genepheno_association gpr,
          genepheno_features gpf
        WHERE 
          gpr.relation_id = gpf.relation_id;
      """
      function: IsTrue(genepheno_association.is_correct)
      weight: "?(genepheno_features.feature)"
    }

    genepheno_causation_inference {
      input_query = """
        SELECT 
          gpr.id as "genepheno_causation.id",
          gpr.is_correct as "genepheno_causation.is_correct",
          gpf.feature as "genepheno_features.feature"
        FROM 
          genepheno_causation gpr,
          genepheno_features gpf
        WHERE 
          gpr.relation_id = gpf.relation_id;
      """
      function: IsTrue(genepheno_causation.is_correct)
      weight: "?(genepheno_features.feature)"
    }

    genepheno_association_to_gene {
      input_query: """
        SELECT
          gp.id as "genepheno_relations.id",
          gp.is_correct as "genepheno_relations.is_correct",
          gm.id as "gene_mentions.id",
          gm.is_correct as "gene_mentions.is_correct"
        FROM
          genepheno_relations gp,
          gene_mentions gm
        WHERE
          gp.doc_id = gm.doc_id
          AND gp.section_id = gm.section_id
          AND gp.gene_mention_id = gm.mention_id
        """
      function: "Imply(genepheno_association.is_correct, gene_mentions.is_correct)"
      weight: "?"
    }

    genepheno_association_to_pheno {
      input_query: """
        SELECT
          gp.id as "genepheno_relations.id",
          gp.is_correct as "genepheno_relations.is_correct",
          pm.id as "pheno_mentions.id",
          pm.is_correct as "pheno_mentions.is_correct"
        FROM
          genepheno_relations gp,
          pheno_mentions pm
        WHERE
          gp.doc_id = pm.doc_id
          AND gp.section_id = pm.section_id
          AND gp.pheno_mention_id = pm.mention_id
        """
      function: "Imply(genepheno_association.is_correct, pheno_mentions.is_correct)"
      weight: "?"
    }

    genepheno_causation_to_gene {
      input_query: """
        SELECT
          gp.id as "genepheno_relations.id",
          gp.is_correct as "genepheno_relations.is_correct",
          gm.id as "gene_mentions.id",
          gm.is_correct as "gene_mentions.is_correct"
        FROM
          genepheno_relations gp,
          gene_mentions gm
        WHERE
          gp.doc_id = gm.doc_id
          AND gp.section_id = gm.section_id
          AND gp.gene_mention_id = gm.mention_id
        """
      function: "Imply(genepheno_causation.is_correct, gene_mentions.is_correct)"
      weight: "?"
    }

    genepheno_causation_to_pheno {
      input_query: """
        SELECT
          gp.id as "genepheno_relations.id",
          gp.is_correct as "genepheno_relations.is_correct",
          pm.id as "pheno_mentions.id",
          pm.is_correct as "pheno_mentions.is_correct"
        FROM
          genepheno_relations gp,
          pheno_mentions pm
        WHERE
          gp.doc_id = pm.doc_id
          AND gp.section_id = pm.section_id
          AND gp.pheno_mention_id = pm.mention_id
        """
      function: "Imply(genepheno_causation.is_correct, pheno_mentions.is_correct)"
      weight: "?"
    }

    genevarpheno_inference {
      input_query = """
        SELECT 
          gvr.id as "genevarpheno_relations.id",
          gvr.is_correct as "genevarpheno_relations.is_correct",
          gvf.feature as "genevarpheno_features.feature"
        FROM 
          genevarpheno_relations gvr,
          genevarpheno_features gvf
        WHERE 
          gvr.relation_id = gvf.relation_id;
      """
      function: IsTrue(genevarpheno_relations.is_correct)
      weight: "?(genevarpheno_features.feature)"
    }

  }

  # NOTE: the --sample_evidence flag needs the sampler binary from the sample_evidence
  # branch of the sampler repo to be in deepdive/util/; if not, just remove this flag
  sampler.sampler_args: "-l 300 -s 1 -i 500 --alpha 0.1 --diminish 0.99 --sample_evidence"
}

