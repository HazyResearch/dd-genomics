deepdive {

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
	gphost   : ${GPHOST}
	gpport   : ${GPPORT}
	gppath   : ${GPPATH}
	# start gpfdist server on the machine running the application with
	# `rungpcommand 'gpfdist -d /lfs/raiders4/0/rionda/greenplum_gpfdist -p 8888'`
  }

  # Parallel grounding
  inference.parallel_grounding: true

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.1

  extraction.parallelism: 1

  # Put your extractors here
  extraction.extractors {

	# Find acronyms
	find_acronyms: {
		before: ${APP_HOME}/code/delete_from_table.sh ${DBNAME} acronyms
		style: tsv_extractor
		input: """SELECT
						doc_id,
						sent_id,
						array_to_string(wordidxs, '|^|'),
						array_to_string(words, '|^|'),
						array_to_string(poses, '|^|'),
						array_to_string(ners, '|^|'),
						array_to_string(lemmas, '|^|'),
						array_to_string(dep_paths, '|^|'),
						array_to_string(dep_parents, '|^|'),
						array_to_string(bounding_boxes, '|^|')
					FROM
						sentences
					"""
		output_relation: acronyms
		udf: ${APP_HOME}/code/find_acronyms.py
		#udf: util/extractor_input_writer.py /afs/cs.stanford.edu/u/rionda/lfs/sentences.tsv
		input_batch_size: ${SENTENCES_BATCH_SIZE}
		parallelism: ${PARALLELISM}
	}

	# Create doc-acronyms table, to be used in extract_gene_mentions
	# The table contains one row for each combination of (doc_id,
	# acronym), containing these two fields and a string of definitions for
	# the acronym defined in the document. The definitions are separated by
	# '|^|'.
	create_doc_acronyms {
		style: sql_extractor
		sql: """CREATE TABLE
						doc_acronyms
				AS
				SELECT
						doc_id,
						acronym,
						array_to_string(array_agg(DISTINCT lower(definition)), '|^|') as definitions
				FROM
						acronyms
				GROUP BY doc_id, acronym
				"""
		dependencies: [ find_acronyms ]
	}

	# Empty the gene_mentions table
	clear_gene_mentions: {
		style: cmd_extractor
		cmd: ${APP_HOME}/code/delete_from_table.sh ${DBNAME} gene_mentions
	}

	# Extract gene mentions
	extract_gene_mentions: {
		style: tsv_extractor
		input: """
				SELECT
					t0.doc_id,
					t0.sent_id,
					max(array_to_string(t0.wordidxs, '|^|')),
					max(array_to_string(t0.words, '|^|')),
					max(array_to_string(t0.poses, '|^|')),
					max(array_to_string(t0.ners, '|^|')),
					max(array_to_string(t0.lemmas, '|^|')),
					max(array_to_string(t0.dep_paths, '|^|')),
					max(array_to_string(t0.dep_parents, '|^|')),
					max(array_to_string(t0.bounding_boxes, '|^|')),
					array_to_string(array_accum(t1.acronym), '|^|'),
					array_to_string(array_accum(t1.definitions), '|^^|')
				FROM
					sentences t0
				LEFT JOIN
					doc_acronyms t1
				ON
					t0.doc_id = t1.doc_id
				AND
					t1.acronym = ANY(t0.words)
				GROUP BY
					t0.doc_id, t0.sent_id
				"""
		output_relation: gene_mentions
		udf: ${APP_HOME}/code/extract_gene_mentions.py
		#udf: util/extractor_input_writer.py ${LFS_DIR}/genomics_data/gene_mentions_input-20k.tsv
		dependencies: [create_doc_acronyms, clear_gene_mentions]
		input_batch_size: ${SENTENCES_BATCH_SIZE}
		parallelism: ${PARALLELISM}
	}

	# Extract gene mentions from the geneRifs
	extract_geneRifs_mentions {
		style: tsv_extractor
		input: """SELECT
						doc_id,
						sent_id,
						array_to_string(wordidxs, '|^|'),
						array_to_string(words, '|^|'),
						array_to_string(poses, '|^|'),
						array_to_string(ners, '|^|'),
						array_to_string(lemmas, '|^|'),
						array_to_string(dep_paths, '|^|'),
						array_to_string(dep_parents, '|^|'),
						array_to_string(bounding_boxes, '|^|'),
						gene
					FROM
						generifs
					"""
		output_relation: gene_mentions
		udf: ${APP_HOME}/code/extract_geneRifs_mentions.py
		#udf: util/extractor_input_writer.py ${LFS_DIR}/geneRifs-40k.tsv
		dependencies: [clear_gene_mentions]
		parallelism: ${PARALLELISM}
	}

	# Extract HPO terms mentions at the local level
	extract_hpoterm_mentions {
		before: ${APP_HOME}/code/delete_from_table.sh ${DBNAME} hpoterm_mentions
		style: tsv_extractor
		input: """SELECT
						doc_id,
						sent_id,
						array_to_string(wordidxs, '|^|'),
						array_to_string(words, '|^|'),
						array_to_string(poses, '|^|'),
						array_to_string(ners, '|^|'),
						array_to_string(lemmas, '|^|'),
						array_to_string(dep_paths, '|^|'),
						array_to_string(dep_parents, '|^|'),
						array_to_string(bounding_boxes, '|^|')
					FROM
						sentences
					"""
		output_relation: hpoterm_mentions
		udf: ${APP_HOME}/code/extract_hpoterm_mentions.py
		#udf: util/extractor_input_writer.py ${APP_HOME}/data/sentences-2k.tsv
		input_batch_size: ${SENTENCES_BATCH_SIZE}
		parallelism: ${PARALLELISM}
	}

	# Extract gene <-> HPO terms relations
	gene_hpoterm_relations: {
		before: ${APP_HOME}/code/delete_from_table.sh ${DBNAME} gene_hpoterm_relations
		style: tsv_extractor
		input: """SELECT
						sentences.doc_id,
						sentences.sent_id,
						array_to_string(sentences.wordidxs, '|^|'),
						array_to_string(sentences.words, '|^|'),
						array_to_string(sentences.poses, '|^|'),
						array_to_string(sentences.ners, '|^|'),
						array_to_string(sentences.lemmas, '|^|'),
						array_to_string(sentences.dep_paths, '|^|'),
						array_to_string(sentences.dep_parents, '|^|'),
						array_to_string(sentences.bounding_boxes, '|^|'),
						genes.entity,
						array_to_string(genes.wordidxs, '|^|'),
						hpoterms.entity,
						array_to_string(hpoterms.wordidxs, '|^|')
				FROM
						gene_mentions genes, hpoterm_mentions hpoterms, sentences
				WHERE
						genes.doc_id = hpoterms.doc_id
				AND		genes.doc_id = sentences.doc_id
				AND		genes.sent_id = hpoterms.sent_id
				AND		genes.sent_id = sentences.sent_id
				AND		(genes.is_correct = True OR genes.is_correct IS NULL)
				AND		(hpoterms.is_correct = True OR hpoterms.is_correct IS NULL)
				"""
		output_relation: gene_hpoterm_relations
		udf: ${APP_HOME}/code/gene_hpoterm_relations.py
		#udf: util/extractor_input_writer.py ${LFS_DIR}/genomics_data/relations.tsv
		dependencies: [ extract_gene_mentions, extract_geneRifs_mentions, extract_hpoterm_mentions ]
		parallelism: ${PARALLELISM}
	}

  }

  pipeline.run: debug
  pipeline.pipelines {
	debug: [ extract_gene_mentions, gene_hpoterm_relations, classify_gene_mentions, classify_hpoterm_mentions, classify_gene_hpoterm_relations_features ]
  }

  # Put your variables here
  schema.variables {
	gene_mentions.is_correct: Boolean
	hpoterm_mentions.is_correct: Boolean
	gene_hpoterm_relations.is_correct: Boolean
  }

  # Put your inference rules here
  inference.factors {

	# Classify the gene mentions
	classify_gene_mentions {
		input_query: """
					SELECT
						id as "gene_mentions.id",
						is_correct as "gene_mentions.is_correct",
						unnest(features) as "feature"
					FROM gene_mentions
					"""
		function: Imply(gene_mentions.is_correct)
		weight: "?(feature)"
	}

	# Classify the HPO terms mentions
	classify_hpoterm_mentions {
		input_query: """
					SELECT
						id as "hpoterm_mentions.id",
						is_correct as "hpoterm_mentions.is_correct",
						unnest(features) as "feature"
					FROM hpoterm_mentions
					"""
		function: Imply(hpoterm_mentions.is_correct)
		weight: "?(feature)"
	}

	# Factor to help classify the gene <-> HPO term relation mentions using the
	# relation features
	classify_gene_hpoterm_relations_features {
		input_query: """
					SELECT
						id as "gene_hpoterm_relations.id",
						is_correct as "gene_hpoterm_relations.is_correct",
						unnest(features) as "feature"
					FROM gene_hpoterm_relations
					"""
		function: Imply(gene_hpoterm_relations.is_correct)
		weight: "?(feature)"
	}

	# TODO
	# Factor to help classify the gene <-> HPO term relation mentions using the
	# correctness of the mentions composing the relations
	#classify_gene_hpoterm_relations_components {
	#	input_query: """
	#				SELECT
	#					t0.id as "gene_hpoterm_relations.id",
	#					t1.id as  TODO
	#				"""
	#
	#	function: Imply(hpoterm_mentions.is_correct, gene_mentions.is_correct, gene_hpoterm_relations.is_correct)
	#	weight: "?"
  }
}

