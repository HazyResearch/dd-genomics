deepdive {

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
  }

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.20


  # Put your extractors here
  extraction.extractors {

	# Process parser output files into TSV file
	#process_parser: {
	#	style: cmd_extractor
	#	cmd: ${APP_HOME}/code/run_parser2sentences.sh ${APP_HOME} ${APP_HOME}/data/sentences.tsv
	#}

	# Create database schema
	#create_schema: {
	#	style: cmd_extractor
	#	cmd: ${APP_HOME}/code/create_schema.sh ${APP_HOME} ${DBNAME}
	#}

	# Load the 'sentences' table
	#load_sentences: {
	#	style: cmd_extractor
	#	cmd: ${APP_HOME}/code/copy_table_from_file.sh ${DBNAME} sentences ${APP_HOME}/data/sentences.tsv.partial
	#	dependencies: [create_schema, process_parser]
	#}

	# Extract gene mentions at the local level
	genes_mentions_local: {
		style: json_extractor
		input: "SELECT * FROM sentences;"
		output_relation: genes_mentions
		udf: ${APP_HOME}/code/genes_mentions_local.py
		#udf: util/extractor_input_writer.py /afs/cs.stanford.edu/u/rionda/lfs/sentences.json
		dependencies: [load_sentences]
	}

	# Extract HPO terms mentions at the local level
	hpoterms_mentions_local: {
		style: json_extractor
		input: "SELECT * FROM sentences;"
		output_relation: hpoterms_mentions
		udf: ${APP_HOME}/code/hpoterms_mentions_local.py 
		dependencies: [load_sentences]
	}

	# Extract gene <-> HPO terms relations 
	gene_hpoterms_relations: {
		style: json_extractor
		input: """SELECT 
					genes.object as gene,
					hpoterms.object hpoterm,
					sentences.doc_id as doc_id,
					sentences.sent_id as sent_id,
					sentences.wordidxs as wordidxs,
					sentences.words as words,
					sentences.poses as poses,
					sentences.ners as ners,
					sentences.lemmas as lemmas,
					sentences.dep_paths as dep_paths,
					sentences.dep_parents as dep_parents,
					sentences.bounding_boxes as bounding_boxes
				FROM genes_mentions genes, hpoterms_mentions hpoterms, sentences
				WHERE genes.sent_id = hpoterms.sent_id
				AND genes.sent_id = sentences.sent_id 
				AND genes.doc_id = hpoterms.doc_id
				AND genes.doc_id = sentences.doc_id
				AND genes.is_correct <> False
				AND hpoterms.is_correct <> False
				"""
		output_relation: gene_hpoterm_relations
		udf: ${APP_HOME}/code/geneh_poterm_relations.py
		dependencies: [ genes_mentions_local, hpoterms_mentions_local ]
	}

  }

  pipeline.run: debug
  pipeline.pipelines {
	debug: [ genes_mentions_is_correct ]
  }

  # Put your variables here
  schema.variables {
	genes_mentions.is_correct: Boolean
	hpoterms_mentions.is_correct: Boolean
	gene_hpoterm_relations.is_correct: Boolean
  }

  # Put your inference rules here
  inference.factors {

	# Check the gene mentions
	genes_mentions_is_correct {
		input_query: """
					SELECT 
						id as "genes_mentions.id",
						is_correct as "genes_mentions.is_correct"
						unnest(features) as "genes_mentions.feature",
					FROM genes_mentions
					"""
		# XXX (Matteo) Not clear to me why the following isn't IsTrue(). 
		# This is taken from pharm
		function: Imply(genes_mentions.is_correct)
		weight: "?(genes_mentions.feature)"
	}

	# Check the HPO terms mentions
	hpoterms_mentions_is_correct {
		input_query: """
					SELECT 
						id as "hpoterms_mentions.id",
						is_correct as "hpoterms_mentions.is_correct"
						unnest(features) as "hpoterms_mentions.feature",
					FROM hpoterms_mentions
					"""
		# XXX (Matteo) Not clear to me why the following isn't IsTrue(). 
		# This is taken from pharm
		function: Imply(hpoterms_mentions.is_correct)
		weight: "?(hpoterms_mentions.feature)"
	}

	# Check the gene <-> HPO term relations mentions
	gene_hpoterm_relation_is_correct {
		input_query: """
					SELECT 
						id as "gene_hpoterm_relations.id",
						is_correct as "gene_hpoterm_relations.is_correct"
						unnest(features) as "gene_hpoterm_relations.feature",
					FROM gene_hpoterm_relations
					"""
		# XXX (Matteo) Not clear to me why the following isn't IsTrue(). 
		# This is taken from pharm
		function: Imply(gene_hpoterm_relations.is_correct)
		weight: "?(gene_hpoterm_relations.feature)"
	}
  }
}
