deepdive {

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
    gphost   : ${GPHOST}
    gpport   : ${GPPORT}
    gppath   : ${GPPATH}
  }

  # Parallel grounding for GreenPlum
  inference.parallel_grounding: ${PARALLEL_GROUNDING}

  # holdout fraction for calibration
  calibration.holdout_fraction: 0.1
#  calibration.holdout_query: """
#    INSERT INTO
#      dd_graph_variables_holdout(variable_id)
#    SELECT
#      id
#    FROM
#      genepheno_facts
#    WHERE
#      gene NOT IN (select distinct gene from genepheno_cheat)
#  """

  # Execute one extractor at a time (but we use parallelism for extractors)
  extraction.parallelism: 1


### PIPELINES ###
  pipeline.run: entailment
  pipeline.pipelines {
    none: [
    ]
    all: [
      gene_extract_candidates, 
      gene_extract_features, 
      gene_inference,
      pheno_extract_candidates, 
      pheno_extract_features,
      pheno_inference,
      gene_pheno_pairs,
      gene_pheno_features,
      gene_pheno_inference
    ]
    gene: [
      gene_extract_candidates, 
      gene_extract_features, 
      gene_inference
    ]
    pheno: [
      pheno_extract_candidates, 
      pheno_extract_features, 
      pheno_inference
    ]
    gene_plus_pheno_test: [
      gene_extract_candidates, 
      gene_extract_features, 
      pheno_extract_candidates,
      pheno_extract_features 
    ]
    pheno_features_test: [
      pheno_extract_features
    ]
    pairs: [
      gene_pheno_pairs,
      gene_pheno_features,
      gene_pheno_inference
    ],
    infer: [
      gene_inference,
      pheno_inference
    ],
    entailment: [
      pheno_pathway_extract,
      pheno_pathway_features,
      genepheno_facts_prior,
      genepheno_cheat,
      entailment_via_pathways,
      deduction_via_hpo_dag,
      # induction_via_hpo_dag
    ]
  }


### EXTRACTORS ###
  extraction.extractors {

    gene_extract_candidates: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} gene_mentions
      style: tsv_extractor
      input: """SELECT doc_id,
              sent_id,
              words,
              lemmas,
              poses,
              ners
          FROM sentences_input"""
      output_relation: gene_mentions
      udf: ${APP_HOME}/code/gene_extract_candidates.py
      parallelism: ${PARALLELISM}
    }

    gene_extract_features: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} gene_features
      style: tsv_extractor
      input: """SELECT 
              t0.doc_id,
              t0.sent_id,
              t0.words,
              t0.lemmas,
              t0.poses,
              t0.ners,
              t0.dep_paths,
              t0.dep_parents,
              m.mention_id,
              array_to_string(m.wordidxs, '|^|')
          FROM sentences_input t0, gene_mentions m
          WHERE t0.doc_id = m.doc_id AND t0.sent_id = m.sent_id
          """
      output_relation: gene_features
      udf: ${APP_HOME}/code/gene_extract_features.py
      parallelism: ${PARALLELISM}
      dependencies: [gene_extract_candidates]
    }

    pheno_extract_candidates: {
      before: ${APP_HOME}/util/pheno_extract_candidates_before.sh
      style: tsv_extractor
      input: """SELECT doc_id,
              sent_id,
              words,
              poses,
              ners,
              lemmas
          FROM sentences_input"""
      output_relation: pheno_mentions
      udf: ${APP_HOME}/code/pheno_extract_candidates.py
      parallelism: ${PARALLELISM}
    }

    pheno_extract_features: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} pheno_features
      style: tsv_extractor
      input: """SELECT 
              t0.doc_id,
              t0.sent_id,
              t0.words,
              t0.lemmas,
              t0.poses,
              t0.ners,
              t0.dep_paths,
              t0.dep_parents,
              m.mention_id,
              array_to_string(m.wordidxs, '|^|')
          FROM sentences_input t0, pheno_mentions m
          WHERE t0.doc_id = m.doc_id AND t0.sent_id = m.sent_id
          """
      output_relation: pheno_features
      udf: ${APP_HOME}/code/pheno_extract_features.py
      parallelism: ${PARALLELISM}
      dependencies: [pheno_extract_candidates]
    }

    gene_pheno_pairs: {
      before: ${APP_HOME}/code/truncate_table.sh ${DBNAME} genepheno_relations
      style: plpy_extractor
      input: """SELECT 
              g.doc_id,

              g.sent_id as sent_id_1,
              g.mention_id as mention_id_1,
              g.wordidxs as wordidxs_1,
              g.words as words_1,
              g.entity as entity_1,
              g.type as type_1,
              g.is_correct as correct_1,

              p.sent_id as sent_id_2,
              p.mention_id as mention_id_2,
              p.wordidxs as wordidxs_2,
              p.words as words_2,
              p.entity as entity_2,
              p.type as type_2,
              p.is_correct as correct_2
          FROM gene_mentions g, pheno_mentions p
          WHERE g.doc_id = p.doc_id AND g.sent_id = p.sent_id
            AND g.wordidxs <> p.wordidxs
          """
      output_relation: genepheno_relations
      udf: ${APP_HOME}/blocks/gene_pheno_pairs.py
      parallelism: ${PARALLELISM}
      dependencies: [gene_extract_candidates, pheno_extract_candidates]
    }

    gene_pheno_features: {
      before: ${APP_HOME}/code/truncate_table.sh ${DBNAME} genepheno_features
      style: plpy_extractor
      input: """SELECT
              t0.doc_id,
              t0.sent_id,
              t0.words,
              t0.lemmas,
              t0.poses,
              t0.ners,
              t0.dep_paths,
              t0.dep_parents,
              t0.wordidxs,
              t1.relation_id,
              t1.wordidxs_1,
              t1.wordidxs_2
           FROM
              sentences t0,
              genepheno_relations t1
          WHERE
              t0.doc_id = t1.doc_id and t0.sent_id = t1.sent_id_1
        """
      output_relation: genepheno_features
      udf: ${APP_HOME}/blocks/pair_features.py
      parallelism: ${PARALLELISM}
      dependencies: [gene_pheno_pairs]
    }

    pheno_pathway_extract: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} pheno_pathway_relations
      style: tsv_extractor
      input: """
        SELECT DISTINCT
          p.child,
          r.pathway_id
        FROM
          reactome_pathways r,
          hpo_dag p
        WHERE
          p.is_pheno
      """
      output_relation: pheno_pathway_relations
      udf: ${APP_HOME}/code/pheno_pathway_extract.py
      parallelism: ${PARALLELISM}
    }

    pheno_pathway_features: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} pheno_pathway_features
      style: tsv_extractor
      input: """
        SELECT
          pheno, pathway_id
        FROM
          pheno_pathway_relations
      """
      output_relation: pheno_pathway_features
      udf: ${APP_HOME}/code/pheno_pathway_features.py
      parallelism: ${PARALLELISM}
      dependencies: [pheno_pathway_extract]
    }
  }


### SCHEMA ###

  # Random variables
  schema.variables {
    gene_mentions.is_correct: Boolean
    pheno_mentions.is_correct: Boolean
    genepheno_relations.is_correct: Boolean
    genepheno_facts.is_correct: Boolean
    pheno_pathway_relations.is_correct: Boolean
  }


### INFERENCE RULES ###

  # Inference rules
  inference.factors {
    gene_inference {
      input_query = """
        SELECT 
          gene_mentions.id as "gene_mentions.id",
          gene_mentions.is_correct as "gene_mentions.is_correct",
          gf.feature
        FROM gene_mentions, gene_features gf
        WHERE gene_mentions.mention_id = gf.mention_id;
      """
      function: IsTrue(gene_mentions.is_correct)
      weight: "?(feature)"
    }

    pheno_inference {
      input_query = """
        SELECT 
          pheno_mentions.id as "pheno_mentions.id",
          pheno_mentions.is_correct as "pheno_mentions.is_correct",
          pf.feature
        FROM pheno_mentions, pheno_features pf
        WHERE pheno_mentions.mention_id = pf.mention_id;
      """
      function: IsTrue(pheno_mentions.is_correct)
      weight: "?(feature)"
    }

    gene_pheno_inference {
      input_query = """
        SELECT 
          genepheno_relations.id as "genepheno_relations.id",
          genepheno_relations.is_correct as "genepheno_relations.is_correct",
          pf.feature
        FROM genepheno_relations, genepheno_features pf
        WHERE genepheno_relations.relation_id = pf.relation_id;
      """
      function: IsTrue(genepheno_relations.is_correct)
      weight: "?(feature)"
    }

    gene_pheno_to_gene {
      input_query: """
        SELECT
          gp.id as "genepheno_relations.id",
          gp.is_correct as "genepheno_relations.is_correct",
          gm.id as "gene_mentions.id",
          gm.is_correct as "gene_mentions.is_correct"
        FROM
          genepheno_relations gp,
          gene_mentions gm
        WHERE
          gp.doc_id = gm.doc_id AND
          gp.mention_id_1 = gm.mention_id
        """
      function: "Imply(genepheno_relations.is_correct, gene_mentions.is_correct)"
      weight: "?"
    }

    gene_pheno_to_pheno {
      input_query: """
        SELECT
          gp.id as "genepheno_relations.id",
          gp.is_correct as "genepheno_relations.is_correct",
          pm.id as "pheno_mentions.id",
          pm.is_correct as "pheno_mentions.is_correct"
        FROM
          genepheno_relations gp,
          pheno_mentions pm
        WHERE
          gp.doc_id = pm.doc_id AND
          gp.mention_id_1 = pm.mention_id
        """
      function: "Imply(genepheno_relations.is_correct, pheno_mentions.is_correct)"
      weight: "?"
    }

    genepheno_facts_prior {
      input_query: """
        SELECT 
          gp.id as "genepheno_facts.id",
          gp.is_correct as "genepheno_facts.is_correct"
        FROM
          genepheno_facts gp
      """
      function: "IsTrue(genepheno_facts.is_correct)"
      weight: "?"
    }

    genepheno_cheat {
      input_query: """
        SELECT
          gp.id as "genepheno_facts.id",
          gp.is_correct as "genepheno_facts.is_correct"
        FROM
          genepheno_facts gp,
          genepheno_cheat gp_cheat
        WHERE
          gp.gene = gp_cheat.gene AND
          gp.pheno = gp_cheat.pheno
        """
      function: "IsTrue(genepheno_facts.is_correct)"
      weight: "?"
    }

    entailment_via_pathways {
      input_query: """
        SELECT
          gp1.id as "genepheno_facts.gp1.id",
          gp1.is_correct as "genepheno_facts.gp1.is_correct",
          gp2.id as "genepheno_facts.gp2.id",
          gp2.is_correct as "genepheno_facts.gp2.is_correct",
          f.feature
        FROM
          genepheno_facts gp1,
          genepheno_facts gp2,
          pheno_pathway_relations pp,
          reactome_pathways r1,
          reactome_pathways r2,
          pheno_pathway_features f
        WHERE
          gp1.pheno = gp2.pheno AND
          gp1.gene < gp2.gene AND
          gp1.gene = r1.gene AND
          gp2.gene = r2.gene AND
          r1.pathway_id = r2.pathway_id AND
          pp.pathway_id = r1.pathway_id AND
          pp.pheno = gp1.pheno AND
          pp.pheno = f.pheno AND
          pp.pathway_id = f.pathway_id
      """
      function: "Equal(genepheno_facts.gp1.is_correct, genepheno_facts.gp2.is_correct)"
      weight: "?(feature)"
    }

    deduction_via_hpo_dag {
      input_query: """
        SELECT
          gp1.id as "genepheno_facts.gp1.id",
          gp1.is_correct as "genepheno_facts.gp1.is_correct",
          gp2.id as "genepheno_facts.gp2.id",
          gp2.is_correct as "genepheno_facts.gp2.is_correct"
        FROM
          genepheno_facts gp1,
          genepheno_facts gp2,
          hpo_dag
        WHERE
          gp1.gene = gp2.gene AND
          gp1.pheno = hpo_dag.parent AND
          gp2.pheno = hpo_dag.child
      """
      function: "Imply(genepheno_facts.gp2.is_correct, genepheno_facts.gp1.is_correct)"
      weight: "?"
    }

    induction_via_hpo_dag {
      input_query: """
        SELECT
          gp1.id as "genepheno_facts.gp1.id",
          gp1.is_correct as "genepheno_facts.gp1.is_correct",
          gp2.id as "genepheno_facts.gp2.id",
          gp2.is_correct as "genepheno_facts.gp2.is_correct"
        FROM
          genepheno_facts gp1,
          genepheno_facts gp2,
          hpo_dag
        WHERE
          gp1.gene = gp2.gene AND
          gp1.pheno = hpo_dag.parent AND
          gp2.pheno = hpo_dag.child
      """
      function: "Imply(genepheno_facts.gp1.is_correct, genepheno_facts.gp2.is_correct)"
      weight: "?"
    }
  }

  sampler.sampler_args: "-l 300 -s 1 -i 500 --alpha 0.1 --diminish 0.99"
}

