deepdive {

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
    gphost   : ${GPHOST}
    gpport   : ${GPPORT}
    gppath   : ${GPPATH}
  }

  # Parallel grounding for GreenPlum
  inference.parallel_grounding: ${PARALLEL_GROUNDING}

  # holdout fraction for calibration
  calibration.holdout_fraction: 0.1

  # Execute one extractor at a time (but we use parallelism for extractors)
  extraction.parallelism: 1


### PIPELINES ###

  pipeline.run: pheno_test
  pipeline.pipelines {
    none: [
    ]
    all: [
      gene_mentions, 
      gene_features, 
      i_gene_mentions,
      pheno_mentions, 
      pheno_features,
      i_pheno_mentions,
      gene_pheno_pairs,
      gene_pheno_features,
      i_pairs
    ]
    gene: [
      gene_mentions, 
      gene_features, 
      i_gene_mentions
    ]
    pheno: [
      pheno_mentions, 
      pheno_features, 
      pheno_inference
    ]
    pheno_test: [
      pheno_extract_candidates
    ]
    pairs: [
      gene_pheno_pairs,
      gene_pheno_features,
      i_pairs
    ]
    infer: [i_gene_mentions, i_pheno_mentions]
  }


### EXTRACTORS ###
  extraction.extractors {

    gene_mentions: {
      before: ${APP_HOME}/code/truncate_table.sh ${DBNAME} gene_mentions
      style: plpy_extractor
      input: """SELECT doc_id,
              sent_id,
              words,
              lemmas,
              poses,
              ners
          FROM sentences"""
      output_relation: gene_mentions
      udf: ${APP_HOME}/blocks/gene_mentions.py
      parallelism: ${PARALLELISM}
    }

    gene_features: {
      before: ${APP_HOME}/code/truncate_table.sh ${DBNAME} gene_features
      style: plpy_extractor
      input: """SELECT 
              t0.doc_id,
              t0.sent_id,
              t0.words,
              t0.lemmas,
              t0.poses,
              t0.ners,
              t0.dep_paths,
              t0.dep_parents,
              m.mention_id,
              m.wordidxs
          FROM sentences t0, gene_mentions m
          WHERE t0.doc_id = m.doc_id AND t0.sent_id = m.sent_id
          """
      output_relation: gene_features
      udf: ${APP_HOME}/blocks/mention_features.py
      parallelism: ${PARALLELISM}
      dependencies: [gene_mentions]
    }

    pheno_extract_candidates: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} pheno_mentions
      style: tsv_extractor
      input: """SELECT doc_id,
              sent_id,
              words,
              poses,
              ners,
              lemmas
          FROM sentences_input"""
      output_relation: pheno_mentions
      udf: ${APP_HOME}/code/pheno_extract_candidates.py
      parallelism: ${PARALLELISM}
    }

    pheno_features: {
      before: ${APP_HOME}/code/truncate_table.sh ${DBNAME} pheno_features
      style: plpy_extractor
      input: """SELECT 
              t0.doc_id,
              t0.sent_id,
              t0.words,
              t0.lemmas,
              t0.poses,
              t0.ners,
              t0.dep_paths,
              t0.dep_parents,
              m.mention_id,
              m.wordidxs
          FROM sentences t0, pheno_mentions m
          WHERE t0.doc_id = m.doc_id AND t0.sent_id = m.sent_id
          """
      output_relation: pheno_features
      udf: ${APP_HOME}/blocks/mention_features.py
      parallelism: ${PARALLELISM}
      dependencies: [pheno_mentions]
    }

    gene_pheno_pairs: {
      before: ${APP_HOME}/code/truncate_table.sh ${DBNAME} genepheno_relations
      style: plpy_extractor
      input: """SELECT 
              g.doc_id,

              g.sent_id as sent_id_1,
              g.mention_id as mention_id_1,
              g.wordidxs as wordidxs_1,
              g.words as words_1,
              g.entity as entity_1,
              g.type as type_1,
              g.is_correct as correct_1,

              p.sent_id as sent_id_2,
              p.mention_id as mention_id_2,
              p.wordidxs as wordidxs_2,
              p.words as words_2,
              p.entity as entity_2,
              p.type as type_2,
              p.is_correct as correct_2
          FROM gene_mentions g, pheno_mentions p
          WHERE g.doc_id = p.doc_id AND g.sent_id = p.sent_id
            AND g.wordidxs <> p.wordidxs
          """
      output_relation: genepheno_relations
      udf: ${APP_HOME}/blocks/gene_pheno_pairs.py
      parallelism: ${PARALLELISM}
      dependencies: [gene_mentions, pheno_mentions]
    }

    gene_pheno_features: {
      before: ${APP_HOME}/code/truncate_table.sh ${DBNAME} genepheno_features
      style: plpy_extractor
      input: """SELECT
              t0.doc_id,
              t0.sent_id,
              t0.words,
              t0.lemmas,
              t0.poses,
              t0.ners,
              t0.dep_paths,
              t0.dep_parents,
              t0.wordidxs,
              t1.relation_id,
              t1.wordidxs_1,
              t1.wordidxs_2
           FROM
              sentences t0,
              genepheno_relations t1
          WHERE
              t0.doc_id = t1.doc_id and t0.sent_id = t1.sent_id_1
        """
      output_relation: genepheno_features
      udf: ${APP_HOME}/blocks/pair_features.py
      parallelism: ${PARALLELISM}
      dependencies: [gene_pheno_pairs]
    }


  }


### SCHEMA ###

  # Random variables
  schema.variables {
    gene_mentions.is_correct: Boolean
    pheno_mentions.is_correct: Boolean
    genepheno_relations.is_correct: Boolean
  }


### INFERENCE RULES ###

  # Inference rules
  inference.factors {
    i_gene_mentions {
      input_query = """
        SELECT 
          gene_mentions.id as "gene_mentions.id",
          gene_mentions.is_correct as "gene_mentions.is_correct",
          gf.feature
        FROM gene_mentions, gene_features gf
        WHERE gene_mentions.mention_id = gf.mention_id;
      """

      function: IsTrue(gene_mentions.is_correct)
      weight: "?(feature)"
    }

    pheno_inference {
      input_query = """
        SELECT 
          pheno_mentions.id as "pheno_mentions.id",
          pheno_mentions.is_correct as "pheno_mentions.is_correct",
          pf.feature
        FROM pheno_mentions, pheno_features pf
        WHERE pheno_mentions.mention_id = pf.mention_id;
      """

      function: IsTrue(pheno_mentions.is_correct)
      weight: "?(feature)"
    }

    i_pairs {
      input_query = """
        SELECT 
          genepheno_relations.id as "genepheno_relations.id",
          genepheno_relations.is_correct as "genepheno_relations.is_correct",
          pf.feature
        FROM genepheno_relations, genepheno_features pf
        WHERE genepheno_relations.relation_id = pf.relation_id;
      """

      function: IsTrue(genepheno_relations.is_correct)
      weight: "?(feature)"
    }

    # TODO: join inference factor

  }

  sampler.sampler_args: "-l 300 -s 1 -i 500 --alpha 0.1 --diminish 0.99"
}

