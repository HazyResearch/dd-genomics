deepdive {

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
    gphost   : ${GPHOST}
    gpport   : ${GPPORT}
    gppath   : ${GPPATH}
  }

  # Parallel grounding for GreenPlum
  inference.parallel_grounding: ${PARALLEL_GROUNDING}

  # holdout fraction for calibration
  calibration.holdout_fraction: 0.1

  # Execute one extractor at a time (but we use parallelism for extractors)
  extraction.parallelism: 1


  ### PIPELINES ###
  pipeline.run: ${GDD_PIPELINE}
  pipeline.pipelines {
    none: [
    ]
    all: [
      gene_extract_candidates, 
      gene_extract_features, 
      gene_inference,
      pheno_extract_candidates, 
      pheno_extract_features,
      pheno_inference,
      genepheno_extract_candidates,
      genepheno_extract_features,
      genepheno_inference,
      genepheno_to_gene,
      genepheno_to_pheno
    ]
    all_no_inference: [
      gene_extract_candidates, 
      gene_extract_features, 
      pheno_extract_candidates, 
      pheno_extract_features,
      genepheno_extract_candidates,
      genepheno_extract_features
    ]
    gene: [
      gene_extract_candidates, 
      gene_extract_features, 
      gene_inference
    ]
    gene_no_inference: [
      gene_extract_candidates, 
      gene_extract_features 
    ]
    gene_inference: [
      gene_inference
    ]
    pheno: [
      pheno_extract_candidates, 
      pheno_extract_features, 
      pheno_inference
    ]
    pheno_no_inference: [
      pheno_extract_candidates, 
      pheno_extract_features
    ] 
    genepheno: [
      genepheno_extract_candidates,
      genepheno_extract_features,
      genepheno_inference,
      genepheno_to_gene,
      genepheno_to_pheno
    ]
    genepheno_no_inference: [
      genepheno_extract_candidates,
      genepheno_extract_features
    ]
  }


### EXTRACTORS ###
  extraction.extractors {

    gene_extract_candidates: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} gene_mentions
      style: tsv_extractor
      input: """SELECT doc_id,
              sent_id,
              words,
              lemmas,
              poses,
              ners
          FROM sentences_input"""
      output_relation: gene_mentions
      udf: ${APP_HOME}/code/gene_extract_candidates.py
      parallelism: ${PARALLELISM}
    }

    gene_extract_features: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} gene_features
      style: tsv_extractor
      input: """SELECT 
              t0.doc_id,
              t0.sent_id,
              t0.words,
              t0.lemmas,
              t0.poses,
              t0.ners,
              t0.dep_paths,
              t0.dep_parents,
              m.mention_id,
              array_to_string(m.wordidxs, '|^|')
          FROM sentences_input t0, gene_mentions m
          WHERE t0.doc_id = m.doc_id AND t0.sent_id = m.sent_id
          """
      output_relation: gene_features
      udf: ${APP_HOME}/code/gene_extract_features.py
      parallelism: ${PARALLELISM}
      dependencies: [gene_extract_candidates]
    }

    pheno_extract_candidates: {
      before: ${APP_HOME}/util/pheno_extract_candidates_before.sh
      style: tsv_extractor
      input: """SELECT doc_id,
              sent_id,
              words,
              lemmas,
              poses,
              ners
          FROM sentences_input"""
      output_relation: pheno_mentions
      udf: ${APP_HOME}/code/pheno_extract_candidates.py
      parallelism: ${PARALLELISM}
      input_batch_size: 100000
    }

    pheno_extract_features: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} pheno_features
      style: tsv_extractor
      input: """SELECT 
              t0.doc_id,
              t0.sent_id,
              t0.words,
              t0.lemmas,
              t0.poses,
              t0.ners,
              t0.dep_paths,
              t0.dep_parents,
              m.mention_id,
              array_to_string(m.wordidxs, '|^|')
          FROM sentences_input t0, pheno_mentions m
          WHERE t0.doc_id = m.doc_id AND t0.sent_id = m.sent_id
          """
      output_relation: pheno_features
      udf: ${APP_HOME}/code/pheno_extract_features.py
      parallelism: ${PARALLELISM}
      dependencies: [pheno_extract_candidates]
    }

    genepheno_extract_candidates: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} genepheno_relations
      style: tsv_extractor
      input: """SELECT 
              g.doc_id,
              g.sent_id,
              g.mention_id as gene_mention_id,
              g.entity as gene_entity,
              g.wordidxs as gene_wordidxs,
              p.mention_id as pheno_mention_id,
              p.entity as pheno_entity,
              p.wordidxs as pheno_wordidxs
          FROM gene_mentions g, pheno_mentions p
          WHERE g.doc_id = p.doc_id AND g.sent_id = p.sent_id
            AND g.wordidxs <> p.wordidxs
          """
      output_relation: genepheno_relations
      udf: ${APP_HOME}/code/genepheno_extract_candidates.py
      parallelism: ${PARALLELISM}
      dependencies: [gene_extract_candidates, pheno_extract_candidates]
    }

    genepheno_extract_features: {
      before: ${APP_HOME}/util/truncate_table.sh ${DBNAME} genepheno_features
      style: tsv_extractor
      input: """SELECT
              r.relation_id,
              r.doc_id,
              r.sent_id,
              r.gene_mention_id,
              r.gene_wordidxs,
              r.pheno_mention_id,
              r.pheno_wordidxs,
              s.words,
              s.lemmas,
              s.poses,
              s.ners,
              s.dep_paths,
              s.dep_parents,
              s.wordidxs
           FROM
              genepheno_relations r,
              sentences_input s
          WHERE
              r.doc_id = s.doc_id
              AND r.sent_id = s.sent_id
        """
      output_relation: genepheno_features
      udf: ${APP_HOME}/code/genepheno_extract_features.py
      parallelism: ${PARALLELISM}
      dependencies: [genepheno_extract_candidates]
    }


  }


### SCHEMA ###

  # Random variables
  schema.variables {
    gene_mentions.is_correct: Boolean
    pheno_mentions.is_correct: Boolean
    genepheno_relations.is_correct: Boolean
  }


### INFERENCE RULES ###

  # Inference rules
  inference.factors {
    gene_inference {
      input_query = """
        SELECT 
          gm.id as "gene_mentions.id",
          gm.is_correct as "gene_mentions.is_correct",
          gf.feature as "gene_features.feature"
        FROM
          gene_mentions gm,
          gene_features gf
        WHERE 
          gm.mention_id = gf.mention_id;
      """
      function: IsTrue(gene_mentions.is_correct)
      weight: "?(gene_features.feature)"
    }

    pheno_inference {
      input_query = """
        SELECT 
          pm.id as "pheno_mentions.id",
          pm.is_correct as "pheno_mentions.is_correct",
          pf.feature as "pheno_features.feature"
        FROM 
          pheno_mentions pm, 
          pheno_features pf
        WHERE 
          pm.mention_id = pf.mention_id;
      """
      function: IsTrue(pheno_mentions.is_correct)
      weight: "?(pheno_features.feature)"
    }

    genepheno_inference {
      input_query = """
        SELECT 
          gpr.id as "genepheno_relations.id",
          gpr.is_correct as "genepheno_relations.is_correct",
          gpf.feature as "genepheno_features.feature"
        FROM 
          genepheno_relations gpr,
          genepheno_features gpf
        WHERE 
          gpr.relation_id = gpf.relation_id;
      """
      function: IsTrue(genepheno_relations.is_correct)
      weight: "?(genepheno_features.feature)"
    }

    genepheno_to_gene {
      input_query: """
        SELECT
          gp.id as "genepheno_relations.id",
          gp.is_correct as "genepheno_relations.is_correct",
          gm.id as "gene_mentions.id",
          gm.is_correct as "gene_mentions.is_correct"
        FROM
          genepheno_relations gp,
          gene_mentions gm
        WHERE
          gp.doc_id = gm.doc_id AND
          gp.gene_mention_id = gm.mention_id
        """
      function: "Imply(genepheno_relations.is_correct, gene_mentions.is_correct)"
      weight: "?"
    }

    genepheno_to_pheno {
      input_query: """
        SELECT
          gp.id as "genepheno_relations.id",
          gp.is_correct as "genepheno_relations.is_correct",
          pm.id as "pheno_mentions.id",
          pm.is_correct as "pheno_mentions.is_correct"
        FROM
          genepheno_relations gp,
          pheno_mentions pm
        WHERE
          gp.doc_id = pm.doc_id AND
          gp.pheno_mention_id = pm.mention_id
        """
      function: "Imply(genepheno_relations.is_correct, pheno_mentions.is_correct)"
      weight: "?"
    }
  }

  # NOTE: the --sample_evidence flag needs the sampler binary from the sample_evidence
  # branch of the sampler repo to be in deepdive/util/; if not, just remove this flag
  sampler.sampler_args: "-l 300 -s 1 -i 500 --alpha 0.1 --diminish 0.99 --sample_evidence"
}

