deepdive {

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
  }

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.1

  extraction.parallelism: 2

  # Put your extractors here
  extraction.extractors {

	# Process parser output files into TSV file
	#process_parser: {
	#	style: cmd_extractor
	#	cmd: ${APP_HOME}/code/run_parser2sentences.sh ${APP_HOME} ${APP_HOME}/data/sentences.tsv
	#}

	# Create database schema
	create_schema: {
		style: cmd_extractor
		cmd: ${APP_HOME}/code/create_schema.sh ${APP_HOME} ${DBNAME}
	}

	# Load the 'sentences' table
	#load_sentences: {
	#	style: cmd_extractor
	#	cmd: ${APP_HOME}/code/copy_table_from_file.sh ${DBNAME} sentences ${APP_HOME}/data/sentences.tsv
	#	dependencies: [create_schema, process_parser]
	#}

	# Find acronyms
	find_acronyms: {
		before: ${APP_HOME}/code/delete_from_table.sh ${DBNAME} acronyms
		style: json_extractor
		input: "SELECT * FROM sentences;"
		output_relation: acronyms
		udf: ${APP_HOME}/code/find_acronyms.py
		#udf: util/extractor_input_writer.py /afs/cs.stanford.edu/u/rionda/lfs/sentences.json
		dependencies: [create_schema, load_sentences]
	}

	# Extract gene mentions
	extract_gene_mentions: {
		before: ${APP_HOME}/code/delete_from_table.sh ${DBNAME} gene_mentions
		style: json_extractor
		input: """
				WITH doc_acronyms AS (
					SELECT doc_id, acronym
					FROM acronyms
					GROUP BY doc_id, acronym)
				SELECT 
					t0.doc_id as doc_id,
					t0.sent_id as sent_id,
					t0.wordidxs as wordidxs,
					t0.words as words,
					t0.poses as poses,
					t0.ners as ners,
					t0.lemmas as lemmas,
					t0.dep_paths as dep_paths,
					t0.dep_parents as dep_parents,
					t0.bounding_boxes as bounding_boxes,
					t1.acronym as acronym
				FROM 
					sentences t0
				LEFT JOIN 
					doc_acronyms t1 
				ON 
					t0.doc_id = t1.doc_id 
				AND 
					t1.acronym = ANY(t0.words);
				"""
		output_relation: gene_mentions
		udf: ${APP_HOME}/code/extract_gene_mentions.py 15000 0.01
		#udf: util/extractor_input_writer.py /afs/cs.stanford.edu/u/rionda/lfs/sentences.json
		dependencies: [create_schema, load_sentences, find_acronyms]
		parallelism: 20
	}

	# Extract HPO terms mentions at the local level
#	hpoterm_mentions_local: {
#		before: ${APP_HOME}/code/delete_from_table.sh ${DBNAME} hpoterm_mentions
#		style: json_extractor
#		input: "SELECT * FROM sentences;"
#		output_relation: hpoterm_mentions
#		udf: ${APP_HOME}/code/hpoterm_mentions_local.py 
#		dependencies: [load_sentences]
#		parallelism: 1
#	}

	# Extract gene <-> HPO terms relations 
	#gene_hpoterm_relations: {
	#	before: ${APP_HOME}/code/delete_from_table.sh ${DBNAME} gene_hpoterm_relations
	#	style: json_extractor
	#	input: """SELECT 
	#				genes.object as gene,
	#				hpoterms.object hpoterm,
	#				sentences.doc_id as doc_id,
	#				sentences.sent_id as sent_id,
	#				sentences.wordidxs as wordidxs,
	#				sentences.words as words,
	#				sentences.poses as poses,
	#				sentences.ners as ners,
	#				sentences.lemmas as lemmas,
	#				sentences.dep_paths as dep_paths,
	#				sentences.dep_parents as dep_parents,
	#				sentences.bounding_boxes as bounding_boxes
	#			FROM gene_mentions genes, hpoterm_mentions hpoterms, sentences
	#			WHERE genes.sent_id = hpoterms.sent_id
	#			AND genes.sent_id = sentences.sent_id 
	#			AND genes.doc_id = hpoterms.doc_id
	#			AND genes.doc_id = sentences.doc_id
	#			AND genes.is_correct <> False
	#			AND hpoterms.is_correct <> False
	#			"""
	#	output_relation: gene_hpoterm_relations
	#	udf: ${APP_HOME}/code/gene_hpoterm_relations.py
	#	#udf: util/extractor_input_writer.py /afs/cs.stanford.edu/u/rionda/lfs/relations.json
	#	dependencies: [ extract_gene_mentions, hpoterm_mentions_local ]
	#	#parallelism: 2
	#}

  }

  pipeline.run: debug
  pipeline.pipelines {
	debug: [ extract_gene_mentions, gene_mentions_is_correct]
  }

  # Put your variables here
  schema.variables {
	gene_mentions.is_correct: Boolean
	#hpoterm_mentions.is_correct: Boolean
	#gene_hpoterm_relations.is_correct: Boolean
  }

  # Put your inference rules here
  inference.factors {

	# Check the gene mentions
	gene_mentions_is_correct {
		input_query: """
					SELECT 
						id as "gene_mentions.id",
						is_correct as "gene_mentions.is_correct",
						unnest(features) as "feature"
					FROM gene_mentions
					"""
		function: Imply(gene_mentions.is_correct)
		weight: "?(feature)"
	}

	# Check the HPO terms mentions
#	hpoterm_mentions_is_correct {
#		input_query: """
#					SELECT 
#						id as "hpoterm_mentions.id",
#						is_correct as "hpoterm_mentions.is_correct",
#						unnest(features) as "hpoterm_mentions.feature"
#					FROM hpoterm_mentions
#					"""
#		function: Imply(hpoterm_mentions.is_correct)
#		weight: "?(hpoterm_mentions.feature)"
#	}
#
#	# Check the gene <-> HPO term relations mentions
#	gene_hpoterm_relations_is_correct {
#		input_query: """
#					SELECT 
#						id as "gene_hpoterm_relations.id",
#						is_correct as "gene_hpoterm_relations.is_correct",
#						unnest(features) as "gene_hpoterm_relations.feature"
#					FROM gene_hpoterm_relations
#					"""
#		# XXX (Matteo) Not clear to me why the following isn't IsTrue(). 
#		# This is taken from pharm
#		function: Imply(gene_hpoterm_relations.is_correct)
#		weight: "?(gene_hpoterm_relations.feature)"
#	}
  }
}
