deepdive {
  sampler.sampler_args: "--sample_evidence --n_inference_epoch 1000 --n_samples_per_learning_epoch 1 --n_learning_epoch 10000"
}

deepdive.schema.relations {
  non_gene_acronyms_extract_candidates_view_temp_1 { "type": "view" }
  non_gene_acronyms_extract_candidates_view_temp_2 { "type": "view" }
  pheno_acronyms_extract_candidates_view_temp_1    { "type": "view" }
  pheno_acronyms_extract_candidates_view_temp_2    { "type": "view" }
  variant_mentions_distinct_doc_id_view_temp       { "type": "view" }
  genepheno_causation_updated_condition_met        { "type": "view" }
  genepheno_causation_updated_condition_not_met_1  { "type": "view" }
  genepheno_causation_updated_condition_not_met_2  { "type": "view" }
  genepheno_causation_updated                      { "type": "view" }
  #genepheno_causation_views_temp                  { "type": "view" }
  charite_canon_temp_views                         { "type": "view" }
}

#Quite dirty hack to add the "order by" commands in the array of features and weights, which cannot be done directly in app.ddlog
#We also limit the number of features observed to the ones with positive absolute weights.

      deepdive.extraction.extractors.ext_gene_mentions_views {
        cmd: """

  # TODO use temporary table
  deepdive create table "gene_mentions_views"
  deepdive sql 'INSERT INTO gene_mentions_views SELECT R0.id AS "gene_mentions_filtered.R0.id", R0.doc_id AS "gene_mentions_filtered.R0.doc_id", R0.section_id AS "gene_mentions_filtered.R0.section_id", R0.sent_id AS "gene_mentions_filtered.R0.sent_id", R0.wordidxs AS "gene_mentions_filtered.R0.wordidxs", R0.mention_id AS "gene_mentions_filtered.R0.mention_id", R0.mapping_type AS "gene_mentions_filtered.R0.mapping_type", R0.supertype AS "gene_mentions_filtered.R0.supertype", R0.subtype AS "gene_mentions_filtered.R0.subtype", R0.gene_name AS "gene_mentions_filtered.R0.gene_name", R0.words AS "gene_mentions_filtered.R0.words", R0.is_correct AS "gene_mentions_filtered.R0.is_correct", ARRAY_AGG(R1.feature ORDER BY abs(R2.weight) DESC) AS column_12, ARRAY_AGG(R2.weight ORDER BY abs(R2.weight) DESC) AS column_13, R4_0.is_correct AS "gene_labels.R4_0.is_correct", R4_0.labeler AS "gene_labels.R4_0.labeler", (R0.doc_id || ('\''@'\'' || (R0.section_id || ('\''@'\'' || R0.sent_id)))) AS column_16
FROM gene_features R1, dd_inference_result_variables_mapped_weights_bis R2, gene_mentions_filtered R0 LEFT OUTER JOIN gene_labels R4_0 ON R4_0.mention_id = R0.mention_id 
        WHERE R1.doc_id = R0.doc_id  AND R1.section_id = R0.section_id  AND R1.mention_id = R0.mention_id  AND R2.description = ('\''inf_istrue_gene_mentions_filtered_inference--'\'' || R1.feature) AND abs(R2.weight) > 0
        GROUP BY R0.id, R0.doc_id, R0.section_id, R0.sent_id, R0.wordidxs, R0.mention_id, R0.mapping_type, R0.supertype, R0.subtype, R0.gene_name, R0.words, R0.is_correct, R4_0.is_correct, R4_0.labeler, (R0.doc_id || ('\''@'\'' || (R0.section_id || ('\''@'\'' || R0.sent_id))))'
  # TODO rename temporary table to replace output_relation
  
        """
          output_relation: "gene_mentions_views"
        style: "cmd_extractor"
          input_relations: [
            gene_mentions_filtered
            gene_features
            dd_inference_result_variables_mapped_weights_bis
            gene_labels
          ]
      }

deepdive.extraction.extractors.ext_genepheno_causation_views_temp {
        cmd: """

  # TODO use temporary table
  deepdive create table "genepheno_causation_views_temp" 
  deepdive sql 'INSERT INTO genepheno_causation_views_temp SELECT R0.id AS "genepheno_causation.R0.id", R0.relation_id AS "genepheno_causation.R0.relation_id", R0.doc_id AS "genepheno_causation.R0.doc_id", R0.section_id AS "genepheno_causation.R0.section_id", R0.sent_id AS "genepheno_causation.R0.sent_id", R0.gene_mention_id AS "genepheno_causation.R0.gene_mention_id", R0.gene_name AS "genepheno_causation.R0.gene_name", R0.gene_wordidxs AS "genepheno_causation.R0.gene_wordidxs", R0.pheno_mention_id AS "genepheno_causation.R0.pheno_mention_id", R0.pheno_entity AS "genepheno_causation.R0.pheno_entity", R0.pheno_wordidxs AS "genepheno_causation.R0.pheno_wordidxs", R0.is_correct AS "genepheno_causation.R0.is_correct", R0.supertype AS "genepheno_causation.R0.supertype", R0.subtype AS "genepheno_causation.R0.subtype", ARRAY_AGG(R1.feature ORDER BY abs(R2.weight) DESC) AS column_14, ARRAY_AGG(R2.weight ORDER BY abs(R2.weight) DESC) AS column_15, R4_0.is_correct AS "genepheno_causation_labels.R4_0.is_correct", R4_0.labeler AS "genepheno_causation_labels.R4_0.labeler", (R0.doc_id || ('\''@'\'' || (R0.section_id || ('\''@'\'' || R0.sent_id)))) AS column_18
FROM genepheno_features R1, dd_inference_result_variables_mapped_weights_bis R2, genepheno_causation R0 LEFT OUTER JOIN genepheno_causation_labels R4_0 ON R4_0.relation_id = R0.relation_id 
        WHERE R1.doc_id = R0.doc_id  AND R1.section_id = R0.section_id  AND R1.relation_id = R0.relation_id  AND R2.description = ('\''inf_istrue_genepheno_causation_inference--'\'' || R1.feature) AND abs(R2.weight) > 0
        GROUP BY R0.id, R0.relation_id, R0.doc_id, R0.section_id, R0.sent_id, R0.gene_mention_id, R0.gene_name, R0.gene_wordidxs, R0.pheno_mention_id, R0.pheno_entity, R0.pheno_wordidxs, R0.is_correct, R0.supertype, R0.subtype, R4_0.is_correct, R4_0.labeler, (R0.doc_id || ('\''@'\'' || (R0.section_id || ('\''@'\'' || R0.sent_id))))'
  # TODO rename temporary table to replace output_relation
  
        """
          output_relation: "genepheno_causation_views_temp"
        style: "cmd_extractor"
          input_relations: [
            genepheno_causation
            genepheno_features
            dd_inference_result_variables_mapped_weights_bis
            genepheno_causation_labels
          ]
      }


