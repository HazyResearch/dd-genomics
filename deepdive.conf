
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: ORIGINAL
    }
    


      deepdive.schema.variables {
        non_gene_acronyms.label: Boolean
pheno_mentions_filtered.label: Boolean
genepheno_causation.label: Boolean
gene_mentions_filtered.label: Boolean
genevariant_relations.label: Boolean
genepheno_association.label: Boolean
      }
    

          deepdive.extraction.extractors.extraction_rule_33 {
            sql: """ DROP TABLE IF EXISTS gene_mentions_filtered CASCADE;
            CREATE TABLE
            gene_mentions_filtered(relation_id text,
                      id bigint,
                      label boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_0 {
            sql: """ DROP TABLE IF EXISTS sentences CASCADE;
            CREATE TABLE
            sentences(doc_id text,
         section_id text,
         sent_id int,
         ref_doc_id text,
         words text[],
         lemmas text[],
         poses text[],
         ners text[],
         dep_paths text[],
         dep_parents int[])
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_3 {
            sql: """ DROP TABLE IF EXISTS genes CASCADE;
            CREATE TABLE
            genes(ensembl_id text,
     canonical_name text,
     gene_name text,
     name_type text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_6 {
            sql: """ DROP TABLE IF EXISTS gene_features CASCADE;
            CREATE TABLE
            gene_features(doc_id text,
             section_id text,
             mention_id text,
             feature text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_19 {
            sql: """ DROP TABLE IF EXISTS pheno_acronyms CASCADE;
            CREATE TABLE
            pheno_acronyms(id bigint,
              doc_id text,
              section_id text,
              sent_id int,
              short_wordidxs int[],
              long_wordidxs int[],
              mention_id text,
              supertype text,
              subtype text,
              abbrev text,
              definition text[],
              entity text,
              is_correct boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_31 {
            sql: """ DROP TABLE IF EXISTS ensembl_protein_sequences CASCADE;
            CREATE TABLE
            ensembl_protein_sequences(ensembl_transcript text,
                         aa_seq text[])
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_30 {
            sql: """ DROP TABLE IF EXISTS genepheno_pairs_sentences CASCADE;
            CREATE TABLE
            genepheno_pairs_sentences(doc_id text,
                         section_id text,
                         sent_id int,
                         gene_mention_ids text,
                         gene_entities text[],
                         gene_wordidxs text,
                         gene_is_corrects boolean[],
                         pheno_mention_ids text,
                         pheno_entities text[],
                         pheno_wordidxs text,
                         pheno_is_corrects boolean[])
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_25 {
            sql: """ DROP TABLE IF EXISTS hpo_abnormalities CASCADE;
            CREATE TABLE
            hpo_abnormalities(hpo_id text,
                 pheno_name text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_34 {
            sql: """ DROP TABLE IF EXISTS pheno_mentions_filtered CASCADE;
            CREATE TABLE
            pheno_mentions_filtered(relation_id text,
                       id bigint,
                       label boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_17 {
            sql: """ DROP TABLE IF EXISTS non_gene_acronyms CASCADE;
            CREATE TABLE
            non_gene_acronyms(id bigint,
                 doc_id text,
                 section_id text,
                 sent_id int,
                 short_wordidxs int[],
                 long_wordidxs int[],
                 mention_id text,
                 supertype text,
                 subtype text,
                 abbrev text,
                 definition text[],
                 is_correct boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_37 {
            sql: """ DROP TABLE IF EXISTS non_gene_acronyms CASCADE;
            CREATE TABLE
            non_gene_acronyms(relation_id text,
                 id bigint,
                 label boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_21 {
            sql: """ DROP TABLE IF EXISTS genepheno_holdout_set CASCADE;
            CREATE TABLE
            genepheno_holdout_set(doc_id text,
                     section_id text,
                     sent_id int,
                     gene_wordidxs int[],
                     pheno_wordidxs int[])
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_8 {
            sql: """ DROP TABLE IF EXISTS pheno_features CASCADE;
            CREATE TABLE
            pheno_features(doc_id text,
              section_id text,
              mention_id text,
              feature text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_54 {
            sql: """ DROP TABLE IF EXISTS genepheno_pairs CASCADE;
            CREATE TABLE
            genepheno_pairs(doc_id text,
               section_id text,
               sent_id int,
               gene_mention_id text,
               gene_name text,
               gene_wordidxs text,
               gene_is_correct boolean,
               pheno_mention_id text,
               pheno_entity text,
               pheno_wordidxs text,
               pheno_is_correct boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_29 {
            sql: """ DROP TABLE IF EXISTS dummy CASCADE;
            CREATE TABLE
            dummy(a int,
     b int,
     c int)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_20 {
            sql: """ DROP TABLE IF EXISTS pheno_acronyms_features CASCADE;
            CREATE TABLE
            pheno_acronyms_features(doc_id text,
                       section_id text,
                       mention_id text,
                       feature text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_66 {
            sql: """ DROP TABLE IF EXISTS pheno_acronyms_aggregate CASCADE;
            CREATE TABLE
            pheno_acronyms_aggregate(doc_id text,
                        pa_section_ids text,
                        pa_sent_ids text,
                        pa_abbrevs text,
                        pheno_entities text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_12 {
            sql: """ DROP TABLE IF EXISTS genepheno_features CASCADE;
            CREATE TABLE
            genepheno_features(doc_id text,
                  section_id text,
                  relation_id text,
                  feature text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_4 {
            sql: """ DROP TABLE IF EXISTS gene_mentions CASCADE;
            CREATE TABLE
            gene_mentions(id bigint,
             doc_id text,
             section_id text,
             sent_id int,
             wordidxs int[],
             mention_id text,
             mapping_type text,
             supertype text,
             subtype text,
             gene_name text,
             words text[],
             is_correct boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_11 {
            sql: """ DROP TABLE IF EXISTS genepheno_causation CASCADE;
            CREATE TABLE
            genepheno_causation(id bigint,
                   relation_id text,
                   doc_id text,
                   section_id text,
                   sent_id int,
                   gene_mention_id text,
                   gene_name text,
                   gene_wordidxs int[],
                   pheno_mention_id text,
                   pheno_entity text,
                   pheno_wordidxs int[],
                   is_correct boolean,
                   supertype text,
                   subtype text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_36 {
            sql: """ DROP TABLE IF EXISTS genepheno_causation CASCADE;
            CREATE TABLE
            genepheno_causation(relation_id text,
                   id bigint,
                   label boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_10 {
            sql: """ DROP TABLE IF EXISTS genepheno_association CASCADE;
            CREATE TABLE
            genepheno_association(id bigint,
                     relation_id text,
                     doc_id text,
                     section_id text,
                     sent_id int,
                     gene_mention_id text,
                     gene_name text,
                     gene_wordidxs int[],
                     pheno_mention_id text,
                     pheno_entity text,
                     pheno_wordidxs int[],
                     is_correct boolean,
                     supertype text,
                     subtype text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_35 {
            sql: """ DROP TABLE IF EXISTS genepheno_association CASCADE;
            CREATE TABLE
            genepheno_association(relation_id text,
                     id bigint,
                     label boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_28 {
            sql: """ DROP TABLE IF EXISTS hgvs_hpo CASCADE;
            CREATE TABLE
            hgvs_hpo(variant text,
        hpo_id text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_22 {
            sql: """ DROP TABLE IF EXISTS genepheno_holdout_labels CASCADE;
            CREATE TABLE
            genepheno_holdout_labels(doc_id text,
                        section_id text,
                        sent_id int,
                        is_correct text,
                        type text,
                        labeler text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_1 {
            sql: """ DROP TABLE IF EXISTS sentences_input CASCADE;
            CREATE TABLE
            sentences_input(doc_id text,
               section_id text,
               sent_id int,
               words text,
               lemmas text,
               poses text,
               ners text,
               dep_paths text,
               dep_parents text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_15 {
            sql: """ DROP TABLE IF EXISTS test_nlp CASCADE;
            CREATE TABLE
            test_nlp(id bigint)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_5 {
            sql: """ DROP TABLE IF EXISTS variant_mentions CASCADE;
            CREATE TABLE
            variant_mentions(id bigint,
                doc_id text,
                section_id text,
                sent_id int,
                wordidxs int[],
                mention_id text,
                supertype text,
                subtype text,
                entity text,
                variant_type text,
                ivsNum text,
                pos text,
                posPlus text,
                fromPos text,
                toPos text,
                seq text,
                fromSeq text,
                toSeq text,
                words text[],
                is_correct boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_2 {
            sql: """ DROP TABLE IF EXISTS hpo_to_doc_via_mesh CASCADE;
            CREATE TABLE
            hpo_to_doc_via_mesh(hpo_id text,
                   doc_id text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_13 {
            sql: """ DROP TABLE IF EXISTS genevariant_relations CASCADE;
            CREATE TABLE
            genevariant_relations(id bigint,
                     relation_id text,
                     doc_id text,
                     section1_id text,
                     sent1_id int,
                     section2_id text,
                     sent2_id int,
                     variant_mention_id text,
                     variant_entity text,
                     variant_wordidxs int[],
                     variant_is_correct boolean,
                     gene_mention_id text,
                     gene_name text,
                     gene_wordidxs int[],
                     gene_is_correct boolean,
                     is_correct boolean,
                     supertype text,
                     subtype text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_38 {
            sql: """ DROP TABLE IF EXISTS genevariant_relations CASCADE;
            CREATE TABLE
            genevariant_relations(relation_id text,
                     id bigint,
                     label boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_26 {
            sql: """ DROP TABLE IF EXISTS charite_canon CASCADE;
            CREATE TABLE
            charite_canon(hpo_id text,
             ensembl_id text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_68 {
            sql: """ DROP TABLE IF EXISTS pheno_acronyms_ids CASCADE;
            CREATE TABLE
            pheno_acronyms_ids(doc_id text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_27 {
            sql: """ DROP TABLE IF EXISTS charite CASCADE;
            CREATE TABLE
            charite(hpo_id text,
       ensembl_id text,
       source text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_16 {
            sql: """ DROP TABLE IF EXISTS plos_doi_to_pmid CASCADE;
            CREATE TABLE
            plos_doi_to_pmid(doi text,
                pmid text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_18 {
            sql: """ DROP TABLE IF EXISTS non_gene_acronyms_features CASCADE;
            CREATE TABLE
            non_gene_acronyms_features(doc_id text,
                          section_id text,
                          mention_id text,
                          feature text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_7 {
            sql: """ DROP TABLE IF EXISTS pheno_mentions CASCADE;
            CREATE TABLE
            pheno_mentions(id bigint,
              doc_id text,
              section_id text,
              sent_id int,
              wordidxs int[],
              mention_id text,
              supertype text,
              subtype text,
              entity text,
              words text[],
              is_correct boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_56 {
            sql: """ DROP TABLE IF EXISTS genevariant_pairs CASCADE;
            CREATE TABLE
            genevariant_pairs(doc_id text,
                 gene_section_id text,
                 gene_sent_id int,
                 variant_section_id text,
                 variant_sent_id int,
                 gene_mention_id text,
                 gene_name text,
                 gene_wordidxs text,
                 gene_is_correct boolean,
                 variant_mention_id text,
                 variant_entity text,
                 variant_wordidxs text,
                 variant_type text,
                 variant_ivsnum text,
                 variant_pos text,
                 variant_posplus text,
                 variant_frompos text,
                 variant_topos text,
                 variant_seq text,
                 variant_fromseq text,
                 variant_toseq text,
                 variant_is_correct boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_14 {
            sql: """ DROP TABLE IF EXISTS genevariant_features CASCADE;
            CREATE TABLE
            genevariant_features(doc_id text,
                    section_id text,
                    relation_id text,
                    feature text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_24 {
            sql: """ DROP TABLE IF EXISTS genepheno_association_canon CASCADE;
            CREATE TABLE
            genepheno_association_canon(hpo_id text,
                           ensembl_id text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_9 {
            sql: """ DROP TABLE IF EXISTS variant_features CASCADE;
            CREATE TABLE
            variant_features(doc_id text,
                section_id text,
                mention_id text,
                feature text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_32 {
            sql: """ DROP TABLE IF EXISTS ensembl_gene_sequences CASCADE;
            CREATE TABLE
            ensembl_gene_sequences(ensembl_transcript text,
                      n_seq text[])
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_23 {
            sql: """ DROP TABLE IF EXISTS genepheno_causation_canon CASCADE;
            CREATE TABLE
            genepheno_causation_canon(hpo_id text,
                         ensembl_id text)
            """
            style: "sql_extractor"
          }

        deepdive.extraction.extractors.cleanup {
          sql: """
          TRUNCATE gene_mentions_filtered;
          TRUNCATE sentences;
          TRUNCATE genes;
          TRUNCATE gene_features;
          TRUNCATE pheno_acronyms;
          TRUNCATE ensembl_protein_sequences;
          TRUNCATE genepheno_pairs_sentences;
          TRUNCATE hpo_abnormalities;
          TRUNCATE pheno_mentions_filtered;
          TRUNCATE non_gene_acronyms;
          TRUNCATE non_gene_acronyms;
          TRUNCATE genepheno_holdout_set;
          TRUNCATE pheno_features;
          TRUNCATE genepheno_pairs;
          TRUNCATE dummy;
          TRUNCATE pheno_acronyms_features;
          TRUNCATE pheno_acronyms_aggregate;
          TRUNCATE genepheno_features;
          TRUNCATE gene_mentions;
          TRUNCATE genepheno_causation;
          TRUNCATE genepheno_causation;
          TRUNCATE genepheno_association;
          TRUNCATE genepheno_association;
          TRUNCATE hgvs_hpo;
          TRUNCATE genepheno_holdout_labels;
          TRUNCATE sentences_input;
          TRUNCATE test_nlp;
          TRUNCATE variant_mentions;
          TRUNCATE hpo_to_doc_via_mesh;
          TRUNCATE genevariant_relations;
          TRUNCATE genevariant_relations;
          TRUNCATE charite_canon;
          TRUNCATE pheno_acronyms_ids;
          TRUNCATE charite;
          TRUNCATE plos_doi_to_pmid;
          TRUNCATE non_gene_acronyms_features;
          TRUNCATE pheno_mentions;
          TRUNCATE genevariant_pairs;
          TRUNCATE genevariant_features;
          TRUNCATE genepheno_association_canon;
          TRUNCATE variant_features;
          TRUNCATE ensembl_gene_sequences;
          TRUNCATE genepheno_causation_canon;
          """
          style: "sql_extractor"
        }

      deepdive.extraction.extractors.extraction_rule_55 {
        sql: """ 
        INSERT INTO genepheno_pairs SELECT R0.doc_id AS "gene_mentions.R0.doc_id", R0.section_id AS "gene_mentions.R0.section_id", R0.sent_id AS "gene_mentions.R0.sent_id", R0.mention_id AS "gene_mentions.R0.mention_id", R0.gene_name AS "gene_mentions.R0.gene_name", ARRAY_TO_STRING(R0.wordidxs, '|~|') AS column_5, R0.is_correct AS "gene_mentions.R0.is_correct", R1.mention_id AS "pheno_mentions.R1.mention_id", R1.entity AS "pheno_mentions.R1.entity", ARRAY_TO_STRING(R1.wordidxs, '|~|') AS column_9, R1.is_correct AS "pheno_mentions.R1.is_correct"
FROM gene_mentions R0, pheno_mentions R1
        WHERE R1.doc_id = R0.doc_id  AND R1.section_id = R0.section_id  AND R1.sent_id = R0.sent_id 
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_42" ,  "extraction_rule_48" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_64 {
        sql: """ DROP VIEW IF EXISTS pheno_acronyms_extract_candidates_view_temp_2;
        CREATE VIEW pheno_acronyms_extract_candidates_view_temp_2 AS SELECT R0.doc_id AS column_0, R0.section_id AS column_1, R0.sent_id AS column_2, R0.words AS column_3, string_to_array(R0.words, '|^|') AS column_4, R0.dep_paths AS column_5, R0.dep_parents AS column_6, R0.lemmas AS column_7, R0.poses AS column_8, R0.ners AS column_9, R1.column_3 AS column_10, R1.column_4 AS column_11
FROM sentences_input R0, pheno_acronyms_extract_candidates_view_temp_1 R1
        WHERE R1.column_0 = R0.doc_id  AND R1.column_1 = R0.section_id  AND R1.column_2 = R0.sent_id  AND R0.words LIKE '%-LRB-%'
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_39" ,  "extraction_rule_63" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_67 {
        sql: """ 
        INSERT INTO pheno_acronyms_aggregate SELECT DISTINCT R0.doc_id AS "pheno_acronyms.R0.doc_id", array_to_string(ARRAY_AGG(R0.section_id), '|^|') AS column_1, array_to_string(ARRAY_AGG(R0.sent_id), '|^|') AS column_2, array_to_string(ARRAY_AGG(R0.abbrev), '|^|') AS column_3, array_to_string(ARRAY_AGG(R0.entity), '|^|') AS column_4
FROM pheno_acronyms R0
        WHERE R0.is_correct = 't'
        GROUP BY R0.doc_id
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_65" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_39 {
        sql: """ 
        INSERT INTO sentences_input SELECT R0.doc_id AS "sentences.R0.doc_id", R0.section_id AS "sentences.R0.section_id", R0.ref_doc_id AS "sentences.R0.ref_doc_id", ARRAY_TO_STRING(R0.words, '|^|') AS column_3, ARRAY_TO_STRING(R0.lemmas, '|^|') AS column_4, ARRAY_TO_STRING(R0.poses, '|^|') AS column_5, ARRAY_TO_STRING(R0.ners, '|^|') AS column_6, ARRAY_TO_STRING(R0.dep_paths, '|^|') AS column_7, ARRAY_TO_STRING(R0.dep_parents, '|^|') AS column_8
FROM sentences R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_49 {
        sql: """ DROP VIEW IF EXISTS variant_mentions_filtered;
        CREATE VIEW variant_mentions_filtered AS SELECT R0.id AS column_0, R0.doc_id AS column_1, R0.section_id AS column_2, R0.sent_id AS column_3, R0.wordidxs AS column_4, R0.mention_id AS column_5, R0.supertype AS column_6, R0.subtype AS column_7, R0.entity AS column_8, R0.variant_type AS column_9, R0.ivsNum AS column_10, R0.pos AS column_11, R0.posPlus AS column_12, R0.fromPos AS column_13, R0.toPos AS column_14, R0.seq AS column_15, R0.fromSeq AS column_16, R0.toSeq AS column_17, R0.words AS column_18, R0.is_correct AS column_19
FROM variant_mentions R0
        
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_46" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_63 {
        sql: """ DROP VIEW IF EXISTS pheno_acronyms_extract_candidates_view_temp_1;
        CREATE VIEW pheno_acronyms_extract_candidates_view_temp_1 AS SELECT DISTINCT R0.doc_id AS column_0, R0.section_id AS column_1, R0.sent_id AS column_2, R0.wordidxs AS column_3, R0.entity AS column_4
FROM pheno_mentions R0
        WHERE (R0.is_correct = 't' OR R0.is_correct IS NULL)
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_48" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_59 {
        sql: """ DROP VIEW IF EXISTS non_gene_acronyms_extract_candidates_view_temp_1;
        CREATE VIEW non_gene_acronyms_extract_candidates_view_temp_1 AS SELECT DISTINCT R0.doc_id AS column_0, R0.section_id AS column_1, R0.sent_id AS column_2, R0.wordidxs AS column_3
FROM gene_mentions R0
        
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_42" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_57 {
        sql: """ 
        INSERT INTO genevariant_pairs SELECT R0.doc_id AS "gene_mentions.R0.doc_id", R0.section_id AS "gene_mentions.R0.section_id", R0.sent_id AS "gene_mentions.R0.sent_id", R1.section_id AS "variant_mentions.R1.section_id", R1.sent_id AS "variant_mentions.R1.sent_id", R0.mention_id AS "gene_mentions.R0.mention_id", R0.gene_name AS "gene_mentions.R0.gene_name", array_to_string(R0.wordidxs, '|^|') AS column_7, R0.is_correct AS "gene_mentions.R0.is_correct", R1.mention_id AS "variant_mentions.R1.mention_id", R1.entity AS "variant_mentions.R1.entity", array_to_string(R1.wordidxs, '|^|') AS column_11, R1.variant_type AS "variant_mentions.R1.variant_type", R1.ivsNum AS "variant_mentions.R1.ivsNum", R1.pos AS "variant_mentions.R1.pos", R1.posPlus AS "variant_mentions.R1.posPlus", R1.fromPos AS "variant_mentions.R1.fromPos", R1.toPos AS "variant_mentions.R1.toPos", R1.seq AS "variant_mentions.R1.seq", R1.fromSeq AS "variant_mentions.R1.fromSeq", R1.toSeq AS "variant_mentions.R1.toSeq", R1.is_correct AS "variant_mentions.R1.is_correct"
FROM gene_mentions R0, variant_mentions R1
        WHERE R1.doc_id = R0.doc_id 
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_42" ,  "extraction_rule_46" ]
      }
    

        deepdive.extraction.extractors.extraction_rule_42 {
          input: """ SELECT R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R0.words AS "sentences_input.R0.words", R0.dep_paths AS "sentences_input.R0.dep_paths", R0.dep_parents AS "sentences_input.R0.dep_parents", R0.lemmas AS "sentences_input.R0.lemmas", R0.poses AS "sentences_input.R0.poses", R0.ners AS "sentences_input.R0.ners"
FROM sentences_input R0
        
          """
          output_relation: "gene_mentions"
          udf: ${APP_HOME}"/code/gene_extract_candidates.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_39" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.extraction_rule_44 {
          input: """ SELECT R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R0.words AS "sentences_input.R0.words", R0.lemmas AS "sentences_input.R0.lemmas", R0.poses AS "sentences_input.R0.poses", R0.ners AS "sentences_input.R0.ners", R0.dep_paths AS "sentences_input.R0.dep_paths", R0.dep_parents AS "sentences_input.R0.dep_parents", R1.mention_id AS "gene_mentions.R1.mention_id", R1.mapping_type AS "gene_mentions.R1.mapping_type", ARRAY_TO_STRING(R1.wordidxs, '|^|') AS column_11
FROM sentences_input R0, gene_mentions R1
        WHERE R1.doc_id = R0.doc_id  AND R1.section_id = R0.section_id  AND R1.sent_id = R0.sent_id 
          """
          output_relation: "gene_features"
          udf: ${APP_HOME}"/code/gene_extract_features.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_39" ,  "extraction_rule_42" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.extraction_rule_46 {
          input: """ SELECT R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R0.words AS "sentences_input.R0.words"
FROM sentences_input R0
        
          """
          output_relation: "variant_mentions"
          udf: ${APP_HOME}"/code/variant_extract_candidates.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_39" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.extraction_rule_48 {
          input: """ SELECT R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R0.words AS "sentences_input.R0.words", R0.lemmas AS "sentences_input.R0.lemmas", R0.poses AS "sentences_input.R0.poses", R0.ners AS "sentences_input.R0.ners"
FROM sentences_input R0
        
          """
          output_relation: "pheno_mentions"
          udf: ${APP_HOME}"/code/pheno_extract_candidates.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_39" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.extraction_rule_51 {
          input: """ SELECT R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R0.words AS "sentences_input.R0.words", R0.lemmas AS "sentences_input.R0.lemmas", R0.poses AS "sentences_input.R0.poses", R0.ners AS "sentences_input.R0.ners", R0.dep_paths AS "sentences_input.R0.dep_paths", R0.dep_parents AS "sentences_input.R0.dep_parents", R1.column_5 AS "variant_mentions_filtered.R1.column_5", array_to_string(R1.column_4, '|^|') AS column_10
FROM sentences_input R0, variant_mentions_filtered R1
        WHERE R1.column_1 = R0.doc_id  AND R1.column_2 = R0.section_id  AND R1.column_3 = R0.sent_id 
          """
          output_relation: "variant_features"
          udf: ${APP_HOME}"/code/variant_extract_features.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_39" ,  "extraction_rule_49" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.extraction_rule_53 {
          input: """ SELECT R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R0.words AS "sentences_input.R0.words", R0.lemmas AS "sentences_input.R0.lemmas", R0.poses AS "sentences_input.R0.poses", R0.ners AS "sentences_input.R0.ners", R0.dep_paths AS "sentences_input.R0.dep_paths", R0.dep_parents AS "sentences_input.R0.dep_parents", R1.column_5 AS "pheno_mentions_filtered.R1.column_5", array_to_string(R1.column_4, '|^|') AS column_10
FROM sentences_input R0, pheno_mentions_filtered R1
        WHERE R1.column_1 = R0.doc_id  AND R1.column_2 = R0.section_id  AND R1.column_3 = R0.sent_id 
          """
          output_relation: "pheno_features"
          udf: ${APP_HOME}"/code/pheno_extract_features.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_39" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.extraction_rule_61 {
          input: """ SELECT R0.doc_id AS "sentences_input.R0.doc_id", R0.section_id AS "sentences_input.R0.section_id", R0.sent_id AS "sentences_input.R0.sent_id", R0.words AS "sentences_input.R0.words", R0.lemmas AS "sentences_input.R0.lemmas", R0.poses AS "sentences_input.R0.poses", R0.ners AS "sentences_input.R0.ners", R0.dep_paths AS "sentences_input.R0.dep_paths", R0.dep_parents AS "sentences_input.R0.dep_parents", R1.mention_id AS "non_gene_acronyms.R1.mention_id", R1.supertype AS "non_gene_acronyms.R1.supertype", array_to_string(R1.short_wordidxs, '|^|') AS column_11, array_to_string(R1.long_wordidxs, '|^|') AS column_12
FROM sentences_input R0, non_gene_acronyms R1
        WHERE R1.doc_id = R0.doc_id  AND R1.section_id = R0.section_id  AND R1.sent_id = R0.sent_id 
          """
          output_relation: "non_gene_acronyms_features"
          udf: ${APP_HOME}"/code/non_gene_acronyms_extract_features.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_39" ]
          parallelism: ${PARALLELISM}
        }
      

        deepdive.extraction.extractors.extraction_rule_65 {
          input: """ SELECT R0.column_0 AS "pheno_acronyms_extract_candidates_view_temp_2.R0.column_0", R0.column_1 AS "pheno_acronyms_extract_candidates_view_temp_2.R0.column_1", R0.column_2 AS "pheno_acronyms_extract_candidates_view_temp_2.R0.column_2", R0.column_3 AS "pheno_acronyms_extract_candidates_view_temp_2.R0.column_3", R0.column_5 AS "pheno_acronyms_extract_candidates_view_temp_2.R0.column_5", R0.column_6 AS "pheno_acronyms_extract_candidates_view_temp_2.R0.column_6", R0.column_7 AS "pheno_acronyms_extract_candidates_view_temp_2.R0.column_7", R0.column_8 AS "pheno_acronyms_extract_candidates_view_temp_2.R0.column_8", R0.column_9 AS "pheno_acronyms_extract_candidates_view_temp_2.R0.column_9", R0.column_10 AS "pheno_acronyms_extract_candidates_view_temp_2.R0.column_10", R0.column_11 AS "pheno_acronyms_extract_candidates_view_temp_2.R0.column_11"
FROM pheno_acronyms_extract_candidates_view_temp_2 R0
        
          """
          output_relation: "pheno_acronyms"
          udf: ${APP_HOME}"/code/pheno_acronyms_extract_candidates.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_64" ]
          parallelism: ${PARALLELISM}
        }
      
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.initdb: [extraction_rule_33, extraction_rule_0, extraction_rule_3, extraction_rule_6, extraction_rule_19, extraction_rule_31, extraction_rule_30, extraction_rule_25, extraction_rule_34, extraction_rule_17, extraction_rule_37, extraction_rule_21, extraction_rule_8, extraction_rule_54, extraction_rule_29, extraction_rule_20, extraction_rule_66, extraction_rule_12, extraction_rule_4, extraction_rule_11, extraction_rule_36, extraction_rule_10, extraction_rule_35, extraction_rule_28, extraction_rule_22, extraction_rule_1, extraction_rule_15, extraction_rule_5, extraction_rule_2, extraction_rule_13, extraction_rule_38, extraction_rule_26, extraction_rule_68, extraction_rule_27, extraction_rule_16, extraction_rule_18, extraction_rule_7, extraction_rule_56, extraction_rule_14, extraction_rule_24, extraction_rule_9, extraction_rule_32, extraction_rule_23]
deepdive.pipeline.pipelines.extraction: [extraction_rule_65, extraction_rule_53, extraction_rule_42, extraction_rule_39, extraction_rule_61, extraction_rule_59, extraction_rule_48, extraction_rule_44, extraction_rule_55, extraction_rule_49, extraction_rule_67, extraction_rule_63, extraction_rule_46, extraction_rule_64, extraction_rule_51, extraction_rule_57]
deepdive.pipeline.pipelines.endtoend: [extraction_rule_65, extraction_rule_53, extraction_rule_42, extraction_rule_39, extraction_rule_61, extraction_rule_59, extraction_rule_48, extraction_rule_44, extraction_rule_55, extraction_rule_49, extraction_rule_67, extraction_rule_63, extraction_rule_46, extraction_rule_64, extraction_rule_51, extraction_rule_57]
deepdive.pipeline.pipelines.cleanup: [cleanup]
